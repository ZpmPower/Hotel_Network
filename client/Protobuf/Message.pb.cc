// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* AuthMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  AuthMessage_descriptor_ = file->message_type(0);
  static const int AuthMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, pass_),
  };
  AuthMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthMessage_descriptor_,
      AuthMessage::default_instance_,
      AuthMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthMessage));
  RegisterMessage_descriptor_ = file->message_type(1);
  static const int RegisterMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, passport_),
  };
  RegisterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMessage_descriptor_,
      RegisterMessage::default_instance_,
      RegisterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMessage));
  RequestContext_descriptor_ = file->message_type(2);
  static const int RequestContext_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, message_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, auth_message__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, register_message__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, session_info_),
  };
  RequestContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestContext_descriptor_,
      RequestContext::default_instance_,
      RequestContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestContext));
  RegisterMessageResponse_descriptor_ = file->message_type(3);
  static const int RegisterMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, messagetext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, status_),
  };
  RegisterMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMessageResponse_descriptor_,
      RegisterMessageResponse::default_instance_,
      RegisterMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMessageResponse));
  AuthMessageResponse_descriptor_ = file->message_type(4);
  static const int AuthMessageResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, id_hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, messagetext_),
  };
  AuthMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthMessageResponse_descriptor_,
      AuthMessageResponse::default_instance_,
      AuthMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthMessageResponse));
  SessionInfo_descriptor_ = file->message_type(5);
  static const int SessionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_id_),
  };
  SessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionInfo_descriptor_,
      SessionInfo::default_instance_,
      SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionInfo));
  ResponseContext_descriptor_ = file->message_type(6);
  static const int ResponseContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, message_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, register_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, auth_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, session_info_),
  };
  ResponseContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseContext_descriptor_,
      ResponseContext::default_instance_,
      ResponseContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseContext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthMessage_descriptor_, &AuthMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMessage_descriptor_, &RegisterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestContext_descriptor_, &RequestContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMessageResponse_descriptor_, &RegisterMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthMessageResponse_descriptor_, &AuthMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionInfo_descriptor_, &SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseContext_descriptor_, &ResponseContext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete AuthMessage::default_instance_;
  delete AuthMessage_reflection_;
  delete RegisterMessage::default_instance_;
  delete RegisterMessage_reflection_;
  delete RequestContext::default_instance_;
  delete RequestContext_reflection_;
  delete RegisterMessageResponse::default_instance_;
  delete RegisterMessageResponse_reflection_;
  delete AuthMessageResponse::default_instance_;
  delete AuthMessageResponse_reflection_;
  delete SessionInfo::default_instance_;
  delete SessionInfo_reflection_;
  delete ResponseContext::default_instance_;
  delete ResponseContext_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::network::protobuf_AddDesc_MessageType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\007network\032\021MessageType.pr"
    "oto\"*\n\013AuthMessage\022\r\n\005login\030\001 \001(\t\022\014\n\004pas"
    "s\030\002 \001(\t\"\216\001\n\017RegisterMessage\022\r\n\005login\030\001 \001"
    "(\t\022\014\n\004pass\030\002 \001(\t\022\021\n\tfirstname\030\003 \001(\t\022\022\n\ns"
    "econdname\030\004 \001(\t\022\020\n\010lastname\030\005 \001(\t\022\023\n\013pho"
    "nenumber\030\006 \001(\t\022\020\n\010passport\030\007 \001(\t\"\314\001\n\016Req"
    "uestContext\022,\n\rmessage_type_\030\001 \001(\0162\025.net"
    "work.message_type\022+\n\rauth_message_\030\003 \001(\013"
    "2\024.network.AuthMessage\0223\n\021register_messa"
    "ge_\030\004 \001(\0132\030.network.RegisterMessage\022*\n\014s"
    "ession_info\030\005 \001(\0132\024.network.SessionInfo\""
    ">\n\027RegisterMessageResponse\022\023\n\013messageTex"
    "t\030\001 \001(\t\022\016\n\006status\030\002 \001(\010\"Z\n\023AuthMessageRe"
    "sponse\022\014\n\004role\030\001 \001(\005\022\020\n\010id_hotel\030\002 \001(\005\022\016"
    "\n\006status\030\003 \001(\010\022\023\n\013messageText\030\004 \001(\t\"2\n\013S"
    "essionInfo\022\017\n\007user_id\030\001 \001(\003\022\022\n\nsession_i"
    "d\030\002 \001(\t\"\361\001\n\017ResponseContext\022\022\n\nerror_cod"
    "e\030\001 \001(\005\022,\n\rmessage_type_\030\002 \001(\0162\025.network"
    ".message_type\022;\n\021register_response\030\003 \001(\013"
    "2 .network.RegisterMessageResponse\0223\n\rau"
    "th_response\030\004 \001(\0132\034.network.AuthMessageR"
    "esponse\022*\n\014session_info\030\005 \001(\0132\024.network."
    "SessionInfo", 891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  AuthMessage::default_instance_ = new AuthMessage();
  RegisterMessage::default_instance_ = new RegisterMessage();
  RequestContext::default_instance_ = new RequestContext();
  RegisterMessageResponse::default_instance_ = new RegisterMessageResponse();
  AuthMessageResponse::default_instance_ = new AuthMessageResponse();
  SessionInfo::default_instance_ = new SessionInfo();
  ResponseContext::default_instance_ = new ResponseContext();
  AuthMessage::default_instance_->InitAsDefaultInstance();
  RegisterMessage::default_instance_->InitAsDefaultInstance();
  RequestContext::default_instance_->InitAsDefaultInstance();
  RegisterMessageResponse::default_instance_->InitAsDefaultInstance();
  AuthMessageResponse::default_instance_->InitAsDefaultInstance();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  ResponseContext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthMessage::kLoginFieldNumber;
const int AuthMessage::kPassFieldNumber;
#endif  // !_MSC_VER

AuthMessage::AuthMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.AuthMessage)
}

void AuthMessage::InitAsDefaultInstance() {
}

AuthMessage::AuthMessage(const AuthMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.AuthMessage)
}

void AuthMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:network.AuthMessage)
  SharedDtor();
}

void AuthMessage::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (this != default_instance_) {
  }
}

void AuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthMessage_descriptor_;
}

const AuthMessage& AuthMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

AuthMessage* AuthMessage::default_instance_ = NULL;

AuthMessage* AuthMessage::New() const {
  return new AuthMessage;
}

void AuthMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.AuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.AuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.AuthMessage)
  return false;
#undef DO_
}

void AuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.AuthMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.AuthMessage)
}

::google::protobuf::uint8* AuthMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.AuthMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.AuthMessage)
  return target;
}

int AuthMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthMessage::MergeFrom(const AuthMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {

  return true;
}

void AuthMessage::Swap(AuthMessage* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthMessage_descriptor_;
  metadata.reflection = AuthMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMessage::kLoginFieldNumber;
const int RegisterMessage::kPassFieldNumber;
const int RegisterMessage::kFirstnameFieldNumber;
const int RegisterMessage::kSecondnameFieldNumber;
const int RegisterMessage::kLastnameFieldNumber;
const int RegisterMessage::kPhonenumberFieldNumber;
const int RegisterMessage::kPassportFieldNumber;
#endif  // !_MSC_VER

RegisterMessage::RegisterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterMessage)
}

void RegisterMessage::InitAsDefaultInstance() {
}

RegisterMessage::RegisterMessage(const RegisterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterMessage)
}

void RegisterMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMessage::~RegisterMessage() {
  // @@protoc_insertion_point(destructor:network.RegisterMessage)
  SharedDtor();
}

void RegisterMessage::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passport_;
  }
  if (this != default_instance_) {
  }
}

void RegisterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMessage_descriptor_;
}

const RegisterMessage& RegisterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegisterMessage* RegisterMessage::default_instance_ = NULL;

RegisterMessage* RegisterMessage::New() const {
  return new RegisterMessage;
}

void RegisterMessage::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_passport()) {
      if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passport_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_firstname;
        break;
      }

      // optional string firstname = 3;
      case 3: {
        if (tag == 26) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secondname;
        break;
      }

      // optional string secondname = 4;
      case 4: {
        if (tag == 34) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lastname;
        break;
      }

      // optional string lastname = 5;
      case 5: {
        if (tag == 42) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 6;
      case 6: {
        if (tag == 50) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_passport;
        break;
      }

      // optional string passport = 7;
      case 7: {
        if (tag == 58) {
         parse_passport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passport().data(), this->passport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterMessage)
  return false;
#undef DO_
}

void RegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firstname(), output);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secondname(), output);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lastname(), output);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonenumber(), output);
  }

  // optional string passport = 7;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->passport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterMessage)
}

::google::protobuf::uint8* RegisterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secondname(), target);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lastname(), target);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phonenumber(), target);
  }

  // optional string passport = 7;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->passport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterMessage)
  return target;
}

int RegisterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string firstname = 3;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string secondname = 4;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondname());
    }

    // optional string lastname = 5;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string phonenumber = 6;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string passport = 7;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMessage::MergeFrom(const RegisterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_passport()) {
      set_passport(from.passport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMessage::CopyFrom(const RegisterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMessage::IsInitialized() const {

  return true;
}

void RegisterMessage::Swap(RegisterMessage* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(pass_, other->pass_);
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(lastname_, other->lastname_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(passport_, other->passport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMessage_descriptor_;
  metadata.reflection = RegisterMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestContext::kMessageTypeFieldNumber;
const int RequestContext::kAuthMessageFieldNumber;
const int RequestContext::kRegisterMessageFieldNumber;
const int RequestContext::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

RequestContext::RequestContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RequestContext)
}

void RequestContext::InitAsDefaultInstance() {
  auth_message__ = const_cast< ::network::AuthMessage*>(&::network::AuthMessage::default_instance());
  register_message__ = const_cast< ::network::RegisterMessage*>(&::network::RegisterMessage::default_instance());
  session_info_ = const_cast< ::network::SessionInfo*>(&::network::SessionInfo::default_instance());
}

RequestContext::RequestContext(const RequestContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RequestContext)
}

void RequestContext::SharedCtor() {
  _cached_size_ = 0;
  message_type__ = 0;
  auth_message__ = NULL;
  register_message__ = NULL;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestContext::~RequestContext() {
  // @@protoc_insertion_point(destructor:network.RequestContext)
  SharedDtor();
}

void RequestContext::SharedDtor() {
  if (this != default_instance_) {
    delete auth_message__;
    delete register_message__;
    delete session_info_;
  }
}

void RequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestContext_descriptor_;
}

const RequestContext& RequestContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RequestContext* RequestContext::default_instance_ = NULL;

RequestContext* RequestContext::New() const {
  return new RequestContext;
}

void RequestContext::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    message_type__ = 0;
    if (has_auth_message_()) {
      if (auth_message__ != NULL) auth_message__->::network::AuthMessage::Clear();
    }
    if (has_register_message_()) {
      if (register_message__ != NULL) register_message__->::network::RegisterMessage::Clear();
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.message_type message_type_ = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::message_type_IsValid(value)) {
            set_message_type_(static_cast< ::network::message_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auth_message_;
        break;
      }

      // optional .network.AuthMessage auth_message_ = 3;
      case 3: {
        if (tag == 26) {
         parse_auth_message_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_message_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_register_message_;
        break;
      }

      // optional .network.RegisterMessage register_message_ = 4;
      case 4: {
        if (tag == 34) {
         parse_register_message_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_message_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session_info;
        break;
      }

      // optional .network.SessionInfo session_info = 5;
      case 5: {
        if (tag == 42) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RequestContext)
  return false;
#undef DO_
}

void RequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RequestContext)
  // optional .network.message_type message_type_ = 1;
  if (has_message_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type_(), output);
  }

  // optional .network.AuthMessage auth_message_ = 3;
  if (has_auth_message_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->auth_message_(), output);
  }

  // optional .network.RegisterMessage register_message_ = 4;
  if (has_register_message_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->register_message_(), output);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RequestContext)
}

::google::protobuf::uint8* RequestContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RequestContext)
  // optional .network.message_type message_type_ = 1;
  if (has_message_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type_(), target);
  }

  // optional .network.AuthMessage auth_message_ = 3;
  if (has_auth_message_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->auth_message_(), target);
  }

  // optional .network.RegisterMessage register_message_ = 4;
  if (has_register_message_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->register_message_(), target);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RequestContext)
  return target;
}

int RequestContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .network.message_type message_type_ = 1;
    if (has_message_type_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type_());
    }

    // optional .network.AuthMessage auth_message_ = 3;
    if (has_auth_message_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_message_());
    }

    // optional .network.RegisterMessage register_message_ = 4;
    if (has_register_message_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_message_());
    }

    // optional .network.SessionInfo session_info = 5;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestContext::MergeFrom(const RequestContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type_()) {
      set_message_type_(from.message_type_());
    }
    if (from.has_auth_message_()) {
      mutable_auth_message_()->::network::AuthMessage::MergeFrom(from.auth_message_());
    }
    if (from.has_register_message_()) {
      mutable_register_message_()->::network::RegisterMessage::MergeFrom(from.register_message_());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::network::SessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestContext::CopyFrom(const RequestContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestContext::IsInitialized() const {

  return true;
}

void RequestContext::Swap(RequestContext* other) {
  if (other != this) {
    std::swap(message_type__, other->message_type__);
    std::swap(auth_message__, other->auth_message__);
    std::swap(register_message__, other->register_message__);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestContext_descriptor_;
  metadata.reflection = RequestContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMessageResponse::kMessageTextFieldNumber;
const int RegisterMessageResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

RegisterMessageResponse::RegisterMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterMessageResponse)
}

void RegisterMessageResponse::InitAsDefaultInstance() {
}

RegisterMessageResponse::RegisterMessageResponse(const RegisterMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterMessageResponse)
}

void RegisterMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMessageResponse::~RegisterMessageResponse() {
  // @@protoc_insertion_point(destructor:network.RegisterMessageResponse)
  SharedDtor();
}

void RegisterMessageResponse::SharedDtor() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (this != default_instance_) {
  }
}

void RegisterMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMessageResponse_descriptor_;
}

const RegisterMessageResponse& RegisterMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegisterMessageResponse* RegisterMessageResponse::default_instance_ = NULL;

RegisterMessageResponse* RegisterMessageResponse::New() const {
  return new RegisterMessageResponse;
}

void RegisterMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_messagetext()) {
      if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetext_->clear();
      }
    }
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messageText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), this->messagetext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterMessageResponse)
  return false;
#undef DO_
}

void RegisterMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterMessageResponse)
  // optional string messageText = 1;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagetext(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterMessageResponse)
}

::google::protobuf::uint8* RegisterMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterMessageResponse)
  // optional string messageText = 1;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagetext(), target);
  }

  // optional bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterMessageResponse)
  return target;
}

int RegisterMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string messageText = 1;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

    // optional bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMessageResponse::MergeFrom(const RegisterMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetext()) {
      set_messagetext(from.messagetext());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMessageResponse::CopyFrom(const RegisterMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMessageResponse::IsInitialized() const {

  return true;
}

void RegisterMessageResponse::Swap(RegisterMessageResponse* other) {
  if (other != this) {
    std::swap(messagetext_, other->messagetext_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMessageResponse_descriptor_;
  metadata.reflection = RegisterMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthMessageResponse::kRoleFieldNumber;
const int AuthMessageResponse::kIdHotelFieldNumber;
const int AuthMessageResponse::kStatusFieldNumber;
const int AuthMessageResponse::kMessageTextFieldNumber;
#endif  // !_MSC_VER

AuthMessageResponse::AuthMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.AuthMessageResponse)
}

void AuthMessageResponse::InitAsDefaultInstance() {
}

AuthMessageResponse::AuthMessageResponse(const AuthMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.AuthMessageResponse)
}

void AuthMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_ = 0;
  id_hotel_ = 0;
  status_ = false;
  messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthMessageResponse::~AuthMessageResponse() {
  // @@protoc_insertion_point(destructor:network.AuthMessageResponse)
  SharedDtor();
}

void AuthMessageResponse::SharedDtor() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (this != default_instance_) {
  }
}

void AuthMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthMessageResponse_descriptor_;
}

const AuthMessageResponse& AuthMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

AuthMessageResponse* AuthMessageResponse::default_instance_ = NULL;

AuthMessageResponse* AuthMessageResponse::New() const {
  return new AuthMessageResponse;
}

void AuthMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(role_, id_hotel_);
    status_ = false;
    if (has_messagetext()) {
      if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.AuthMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_hotel;
        break;
      }

      // optional int32 id_hotel = 2;
      case 2: {
        if (tag == 16) {
         parse_id_hotel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_hotel_)));
          set_has_id_hotel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messageText;
        break;
      }

      // optional string messageText = 4;
      case 4: {
        if (tag == 34) {
         parse_messageText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), this->messagetext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.AuthMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.AuthMessageResponse)
  return false;
#undef DO_
}

void AuthMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.AuthMessageResponse)
  // optional int32 role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role(), output);
  }

  // optional int32 id_hotel = 2;
  if (has_id_hotel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_hotel(), output);
  }

  // optional bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // optional string messageText = 4;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messagetext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.AuthMessageResponse)
}

::google::protobuf::uint8* AuthMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.AuthMessageResponse)
  // optional int32 role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role(), target);
  }

  // optional int32 id_hotel = 2;
  if (has_id_hotel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_hotel(), target);
  }

  // optional bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // optional string messageText = 4;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messagetext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.AuthMessageResponse)
  return target;
}

int AuthMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional int32 id_hotel = 2;
    if (has_id_hotel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_hotel());
    }

    // optional bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string messageText = 4;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthMessageResponse::MergeFrom(const AuthMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_id_hotel()) {
      set_id_hotel(from.id_hotel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_messagetext()) {
      set_messagetext(from.messagetext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessageResponse::CopyFrom(const AuthMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessageResponse::IsInitialized() const {

  return true;
}

void AuthMessageResponse::Swap(AuthMessageResponse* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(id_hotel_, other->id_hotel_);
    std::swap(status_, other->status_);
    std::swap(messagetext_, other->messagetext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthMessageResponse_descriptor_;
  metadata.reflection = AuthMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionInfo::kUserIdFieldNumber;
const int SessionInfo::kSessionIdFieldNumber;
#endif  // !_MSC_VER

SessionInfo::SessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:network.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionInfo_descriptor_;
}

const SessionInfo& SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New() const {
  return new SessionInfo;
}

void SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.SessionInfo)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.SessionInfo)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.SessionInfo)
  return target;
}

int SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionInfo_descriptor_;
  metadata.reflection = SessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseContext::kErrorCodeFieldNumber;
const int ResponseContext::kMessageTypeFieldNumber;
const int ResponseContext::kRegisterResponseFieldNumber;
const int ResponseContext::kAuthResponseFieldNumber;
const int ResponseContext::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

ResponseContext::ResponseContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.ResponseContext)
}

void ResponseContext::InitAsDefaultInstance() {
  register_response_ = const_cast< ::network::RegisterMessageResponse*>(&::network::RegisterMessageResponse::default_instance());
  auth_response_ = const_cast< ::network::AuthMessageResponse*>(&::network::AuthMessageResponse::default_instance());
  session_info_ = const_cast< ::network::SessionInfo*>(&::network::SessionInfo::default_instance());
}

ResponseContext::ResponseContext(const ResponseContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.ResponseContext)
}

void ResponseContext::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  message_type__ = 0;
  register_response_ = NULL;
  auth_response_ = NULL;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseContext::~ResponseContext() {
  // @@protoc_insertion_point(destructor:network.ResponseContext)
  SharedDtor();
}

void ResponseContext::SharedDtor() {
  if (this != default_instance_) {
    delete register_response_;
    delete auth_response_;
    delete session_info_;
  }
}

void ResponseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseContext_descriptor_;
}

const ResponseContext& ResponseContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

ResponseContext* ResponseContext::default_instance_ = NULL;

ResponseContext* ResponseContext::New() const {
  return new ResponseContext;
}

void ResponseContext::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseContext*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(error_code_, message_type__);
    if (has_register_response()) {
      if (register_response_ != NULL) register_response_->::network::RegisterMessageResponse::Clear();
    }
    if (has_auth_response()) {
      if (auth_response_ != NULL) auth_response_->::network::AuthMessageResponse::Clear();
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.ResponseContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_type_;
        break;
      }

      // optional .network.message_type message_type_ = 2;
      case 2: {
        if (tag == 16) {
         parse_message_type_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::message_type_IsValid(value)) {
            set_message_type_(static_cast< ::network::message_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_register_response;
        break;
      }

      // optional .network.RegisterMessageResponse register_response = 3;
      case 3: {
        if (tag == 26) {
         parse_register_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auth_response;
        break;
      }

      // optional .network.AuthMessageResponse auth_response = 4;
      case 4: {
        if (tag == 34) {
         parse_auth_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session_info;
        break;
      }

      // optional .network.SessionInfo session_info = 5;
      case 5: {
        if (tag == 42) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.ResponseContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.ResponseContext)
  return false;
#undef DO_
}

void ResponseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.ResponseContext)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .network.message_type message_type_ = 2;
  if (has_message_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->message_type_(), output);
  }

  // optional .network.RegisterMessageResponse register_response = 3;
  if (has_register_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->register_response(), output);
  }

  // optional .network.AuthMessageResponse auth_response = 4;
  if (has_auth_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auth_response(), output);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.ResponseContext)
}

::google::protobuf::uint8* ResponseContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.ResponseContext)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .network.message_type message_type_ = 2;
  if (has_message_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->message_type_(), target);
  }

  // optional .network.RegisterMessageResponse register_response = 3;
  if (has_register_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->register_response(), target);
  }

  // optional .network.AuthMessageResponse auth_response = 4;
  if (has_auth_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->auth_response(), target);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.ResponseContext)
  return target;
}

int ResponseContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .network.message_type message_type_ = 2;
    if (has_message_type_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type_());
    }

    // optional .network.RegisterMessageResponse register_response = 3;
    if (has_register_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_response());
    }

    // optional .network.AuthMessageResponse auth_response = 4;
    if (has_auth_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_response());
    }

    // optional .network.SessionInfo session_info = 5;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseContext::MergeFrom(const ResponseContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_message_type_()) {
      set_message_type_(from.message_type_());
    }
    if (from.has_register_response()) {
      mutable_register_response()->::network::RegisterMessageResponse::MergeFrom(from.register_response());
    }
    if (from.has_auth_response()) {
      mutable_auth_response()->::network::AuthMessageResponse::MergeFrom(from.auth_response());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::network::SessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseContext::CopyFrom(const ResponseContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseContext::IsInitialized() const {

  return true;
}

void ResponseContext::Swap(ResponseContext* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(message_type__, other->message_type__);
    std::swap(register_response_, other->register_response_);
    std::swap(auth_response_, other->auth_response_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseContext_descriptor_;
  metadata.reflection = ResponseContext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
