// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {

namespace {

const ::google::protobuf::Descriptor* AuthMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterEmployeeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterEmployeeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuestsMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuestsMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeesMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeesMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotelId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotelId_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotelsMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotelsMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VacantRooms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VacantRooms_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdersMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdersMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomTypesMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomTypesMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotelType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotelType_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotelTypesMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotelTypesMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  AuthMessage_descriptor_ = file->message_type(0);
  static const int AuthMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, pass_),
  };
  AuthMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthMessage_descriptor_,
      AuthMessage::default_instance_,
      AuthMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthMessage));
  RegisterMessage_descriptor_ = file->message_type(1);
  static const int RegisterMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, role_),
  };
  RegisterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMessage_descriptor_,
      RegisterMessage::default_instance_,
      RegisterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMessage));
  RegisterEmployeeMessage_descriptor_ = file->message_type(2);
  static const int RegisterEmployeeMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, hotelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, role_),
  };
  RegisterEmployeeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterEmployeeMessage_descriptor_,
      RegisterEmployeeMessage::default_instance_,
      RegisterEmployeeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEmployeeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterEmployeeMessage));
  GuestInfo_descriptor_ = file->message_type(3);
  static const int GuestInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, id_),
  };
  GuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuestInfo_descriptor_,
      GuestInfo::default_instance_,
      GuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuestInfo));
  GuestsMessageResponse_descriptor_ = file->message_type(4);
  static const int GuestsMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestsMessageResponse, guests_),
  };
  GuestsMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuestsMessageResponse_descriptor_,
      GuestsMessageResponse::default_instance_,
      GuestsMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestsMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuestsMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuestsMessageResponse));
  EmployeeInfo_descriptor_ = file->message_type(5);
  static const int EmployeeInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, hotelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, id_),
  };
  EmployeeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeInfo_descriptor_,
      EmployeeInfo::default_instance_,
      EmployeeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeInfo));
  EmployeesMessageResponse_descriptor_ = file->message_type(6);
  static const int EmployeesMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeesMessageResponse, employees_),
  };
  EmployeesMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeesMessageResponse_descriptor_,
      EmployeesMessageResponse::default_instance_,
      EmployeesMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeesMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeesMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeesMessageResponse));
  HotelId_descriptor_ = file->message_type(7);
  static const int HotelId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelId, hotelid_),
  };
  HotelId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotelId_descriptor_,
      HotelId::default_instance_,
      HotelId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotelId));
  HotelInfo_descriptor_ = file->message_type(8);
  static const int HotelInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, type_),
  };
  HotelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotelInfo_descriptor_,
      HotelInfo::default_instance_,
      HotelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotelInfo));
  HotelsMessageResponse_descriptor_ = file->message_type(9);
  static const int HotelsMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelsMessageResponse, hotels_),
  };
  HotelsMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotelsMessageResponse_descriptor_,
      HotelsMessageResponse::default_instance_,
      HotelsMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelsMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelsMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotelsMessageResponse));
  RoomInfo_descriptor_ = file->message_type(10);
  static const int RoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, hotelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, id_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  RoomsMessageResponse_descriptor_ = file->message_type(11);
  static const int RoomsMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsMessageResponse, rooms_),
  };
  RoomsMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomsMessageResponse_descriptor_,
      RoomsMessageResponse::default_instance_,
      RoomsMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomsMessageResponse));
  VacantRooms_descriptor_ = file->message_type(12);
  static const int VacantRooms_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, begin_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, end_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, datebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, dateend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, hotelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, begin_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, end_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, room_type_),
  };
  VacantRooms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VacantRooms_descriptor_,
      VacantRooms::default_instance_,
      VacantRooms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VacantRooms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VacantRooms));
  OrderInfo_descriptor_ = file->message_type(13);
  static const int OrderInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, idroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, employee_secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, guest_secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, hotelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, employee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, guest_id_),
  };
  OrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderInfo_descriptor_,
      OrderInfo::default_instance_,
      OrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderInfo));
  OrdersMessageResponse_descriptor_ = file->message_type(14);
  static const int OrdersMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersMessageResponse, orders_),
  };
  OrdersMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrdersMessageResponse_descriptor_,
      OrdersMessageResponse::default_instance_,
      OrdersMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdersMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrdersMessageResponse));
  MakeOrderInfo_descriptor_ = file->message_type(15);
  static const int MakeOrderInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, idroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, idemployee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, idguest_),
  };
  MakeOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeOrderInfo_descriptor_,
      MakeOrderInfo::default_instance_,
      MakeOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeOrderInfo));
  RequestContext_descriptor_ = file->message_type(16);
  static const int RequestContext_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, message_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, auth_message__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, register_message__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, register_employee_message__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, session_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, hotel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, employee_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, make_order_info_),
  };
  RequestContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestContext_descriptor_,
      RequestContext::default_instance_,
      RequestContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestContext));
  RegisterMessageResponse_descriptor_ = file->message_type(17);
  static const int RegisterMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, messagetext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, status_),
  };
  RegisterMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMessageResponse_descriptor_,
      RegisterMessageResponse::default_instance_,
      RegisterMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMessageResponse));
  AuthMessageResponse_descriptor_ = file->message_type(18);
  static const int AuthMessageResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, id_hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, messagetext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, id_user_),
  };
  AuthMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthMessageResponse_descriptor_,
      AuthMessageResponse::default_instance_,
      AuthMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthMessageResponse));
  SessionInfo_descriptor_ = file->message_type(19);
  static const int SessionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_id_),
  };
  SessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionInfo_descriptor_,
      SessionInfo::default_instance_,
      SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionInfo));
  RoomTypesMessageResponse_descriptor_ = file->message_type(20);
  static const int RoomTypesMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypesMessageResponse, types_),
  };
  RoomTypesMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomTypesMessageResponse_descriptor_,
      RoomTypesMessageResponse::default_instance_,
      RoomTypesMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypesMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypesMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomTypesMessageResponse));
  HotelType_descriptor_ = file->message_type(21);
  static const int HotelType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelType, name_),
  };
  HotelType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotelType_descriptor_,
      HotelType::default_instance_,
      HotelType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotelType));
  HotelTypesMessageResponse_descriptor_ = file->message_type(22);
  static const int HotelTypesMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelTypesMessageResponse, types_),
  };
  HotelTypesMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotelTypesMessageResponse_descriptor_,
      HotelTypesMessageResponse::default_instance_,
      HotelTypesMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelTypesMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotelTypesMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotelTypesMessageResponse));
  ResponseContext_descriptor_ = file->message_type(23);
  static const int ResponseContext_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, message_type__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, register_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, auth_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, session_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, guests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, employees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, hotels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, rooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, hotel_types_),
  };
  ResponseContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseContext_descriptor_,
      ResponseContext::default_instance_,
      ResponseContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseContext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthMessage_descriptor_, &AuthMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMessage_descriptor_, &RegisterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterEmployeeMessage_descriptor_, &RegisterEmployeeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuestInfo_descriptor_, &GuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuestsMessageResponse_descriptor_, &GuestsMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeInfo_descriptor_, &EmployeeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeesMessageResponse_descriptor_, &EmployeesMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotelId_descriptor_, &HotelId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotelInfo_descriptor_, &HotelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotelsMessageResponse_descriptor_, &HotelsMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomsMessageResponse_descriptor_, &RoomsMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VacantRooms_descriptor_, &VacantRooms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderInfo_descriptor_, &OrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrdersMessageResponse_descriptor_, &OrdersMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeOrderInfo_descriptor_, &MakeOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestContext_descriptor_, &RequestContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMessageResponse_descriptor_, &RegisterMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthMessageResponse_descriptor_, &AuthMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionInfo_descriptor_, &SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomTypesMessageResponse_descriptor_, &RoomTypesMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotelType_descriptor_, &HotelType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotelTypesMessageResponse_descriptor_, &HotelTypesMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseContext_descriptor_, &ResponseContext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete AuthMessage::default_instance_;
  delete AuthMessage_reflection_;
  delete RegisterMessage::default_instance_;
  delete RegisterMessage_reflection_;
  delete RegisterEmployeeMessage::default_instance_;
  delete RegisterEmployeeMessage_reflection_;
  delete GuestInfo::default_instance_;
  delete GuestInfo_reflection_;
  delete GuestsMessageResponse::default_instance_;
  delete GuestsMessageResponse_reflection_;
  delete EmployeeInfo::default_instance_;
  delete EmployeeInfo_reflection_;
  delete EmployeesMessageResponse::default_instance_;
  delete EmployeesMessageResponse_reflection_;
  delete HotelId::default_instance_;
  delete HotelId_reflection_;
  delete HotelInfo::default_instance_;
  delete HotelInfo_reflection_;
  delete HotelsMessageResponse::default_instance_;
  delete HotelsMessageResponse_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete RoomsMessageResponse::default_instance_;
  delete RoomsMessageResponse_reflection_;
  delete VacantRooms::default_instance_;
  delete VacantRooms_reflection_;
  delete OrderInfo::default_instance_;
  delete OrderInfo_reflection_;
  delete OrdersMessageResponse::default_instance_;
  delete OrdersMessageResponse_reflection_;
  delete MakeOrderInfo::default_instance_;
  delete MakeOrderInfo_reflection_;
  delete RequestContext::default_instance_;
  delete RequestContext_reflection_;
  delete RegisterMessageResponse::default_instance_;
  delete RegisterMessageResponse_reflection_;
  delete AuthMessageResponse::default_instance_;
  delete AuthMessageResponse_reflection_;
  delete SessionInfo::default_instance_;
  delete SessionInfo_reflection_;
  delete RoomTypesMessageResponse::default_instance_;
  delete RoomTypesMessageResponse_reflection_;
  delete HotelType::default_instance_;
  delete HotelType_reflection_;
  delete HotelTypesMessageResponse::default_instance_;
  delete HotelTypesMessageResponse_reflection_;
  delete ResponseContext::default_instance_;
  delete ResponseContext_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::network::protobuf_AddDesc_MessageType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\007network\032\021MessageType.pr"
    "oto\"*\n\013AuthMessage\022\r\n\005login\030\001 \001(\t\022\014\n\004pas"
    "s\030\002 \001(\t\"\234\001\n\017RegisterMessage\022\r\n\005login\030\001 \001"
    "(\t\022\014\n\004pass\030\002 \001(\t\022\021\n\tfirstname\030\003 \001(\t\022\022\n\ns"
    "econdname\030\004 \001(\t\022\020\n\010lastname\030\005 \001(\t\022\023\n\013pho"
    "nenumber\030\006 \001(\t\022\020\n\010passport\030\007 \001(\t\022\014\n\004role"
    "\030\010 \001(\005\"\305\001\n\027RegisterEmployeeMessage\022\r\n\005lo"
    "gin\030\001 \001(\t\022\014\n\004pass\030\002 \001(\t\022\021\n\tfirstname\030\003 \001"
    "(\t\022\022\n\nsecondname\030\004 \001(\t\022\020\n\010lastname\030\005 \001(\t"
    "\022\023\n\013phonenumber\030\006 \001(\t\022\016\n\006salary\030\007 \001(\005\022\020\n"
    "\010position\030\010 \001(\005\022\017\n\007hotelId\030\t \001(\005\022\014\n\004role"
    "\030\n \001(\005\"w\n\tGuestInfo\022\021\n\tfirstname\030\001 \001(\t\022\022"
    "\n\nsecondname\030\002 \001(\t\022\020\n\010lastname\030\003 \001(\t\022\023\n\013"
    "phonenumber\030\004 \001(\t\022\020\n\010passport\030\005 \001(\t\022\n\n\002i"
    "d\030\006 \001(\005\";\n\025GuestsMessageResponse\022\"\n\006gues"
    "ts\030\001 \003(\0132\022.network.GuestInfo\"\233\001\n\014Employe"
    "eInfo\022\021\n\tfirstname\030\001 \001(\t\022\022\n\nsecondname\030\002"
    " \001(\t\022\020\n\010lastname\030\003 \001(\t\022\023\n\013phonenumber\030\004 "
    "\001(\t\022\016\n\006salary\030\005 \001(\005\022\020\n\010position\030\006 \001(\t\022\017\n"
    "\007hotelId\030\007 \001(\005\022\n\n\002id\030\010 \001(\005\"D\n\030EmployeesM"
    "essageResponse\022(\n\temployees\030\001 \003(\0132\025.netw"
    "ork.EmployeeInfo\"\032\n\007HotelId\022\017\n\007hotelId\030\001"
    " \001(\005\"x\n\tHotelInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004city\030"
    "\002 \001(\t\022\016\n\006street\030\003 \001(\t\022\023\n\013phonenumber\030\004 \001"
    "(\t\022\r\n\005email\030\005 \001(\t\022\r\n\005stars\030\006 \001(\005\022\014\n\004type"
    "\030\007 \001(\t\";\n\025HotelsMessageResponse\022\"\n\006hotel"
    "s\030\001 \003(\0132\022.network.HotelInfo\"\203\001\n\010RoomInfo"
    "\022\016\n\006places\030\001 \001(\005\022\r\n\005price\030\002 \001(\005\022\016\n\006ratin"
    "g\030\003 \001(\005\022\016\n\006status\030\004 \001(\010\022\r\n\005floor\030\005 \001(\005\022\014"
    "\n\004type\030\006 \001(\t\022\017\n\007hotelID\030\007 \001(\005\022\n\n\002id\030\010 \001("
    "\005\"8\n\024RoomsMessageResponse\022 \n\005rooms\030\001 \003(\013"
    "2\021.network.RoomInfo\"\267\001\n\013VacantRooms\022\016\n\006p"
    "laces\030\001 \001(\005\022\023\n\013begin_price\030\002 \001(\005\022\021\n\tend_"
    "price\030\003 \001(\005\022\021\n\tdatebegin\030\005 \001(\t\022\017\n\007dateen"
    "d\030\006 \001(\t\022\017\n\007hotelID\030\007 \001(\005\022\024\n\014begin_rating"
    "\030\010 \001(\005\022\022\n\nend_rating\030\t \001(\005\022\021\n\troom_type\030"
    "\n \001(\t\"\272\001\n\tOrderInfo\022\n\n\002id\030\001 \001(\005\022\021\n\tstart"
    "date\030\002 \001(\t\022\017\n\007enddate\030\003 \001(\t\022\016\n\006idroom\030\004 "
    "\001(\005\022\033\n\023employee_secondname\030\005 \001(\t\022\030\n\020gues"
    "t_secondname\030\006 \001(\t\022\017\n\007hotelID\030\007 \001(\005\022\023\n\013e"
    "mployee_id\030\010 \001(\005\022\020\n\010guest_id\030\t \001(\005\";\n\025Or"
    "dersMessageResponse\022\"\n\006orders\030\001 \003(\0132\022.ne"
    "twork.OrderInfo\"h\n\rMakeOrderInfo\022\021\n\tstar"
    "tdate\030\001 \001(\t\022\017\n\007enddate\030\002 \001(\t\022\016\n\006idroom\030\003"
    " \001(\005\022\022\n\nidemployee\030\004 \001(\005\022\017\n\007idguest\030\005 \001("
    "\005\"\337\003\n\016RequestContext\022,\n\rmessage_type_\030\001 "
    "\001(\0162\025.network.message_type\022+\n\rauth_messa"
    "ge_\030\002 \001(\0132\024.network.AuthMessage\0223\n\021regis"
    "ter_message_\030\003 \001(\0132\030.network.RegisterMes"
    "sage\022D\n\032register_employee_message_\030\004 \001(\013"
    "2 .network.RegisterEmployeeMessage\022*\n\014se"
    "ssion_info\030\005 \001(\0132\024.network.SessionInfo\022\""
    "\n\010hotel_id\030\006 \001(\0132\020.network.HotelId\022,\n\rem"
    "ployee_info\030\007 \001(\0132\025.network.EmployeeInfo"
    "\022$\n\troom_info\030\010 \001(\0132\021.network.RoomInfo\022\""
    "\n\004data\030\t \001(\0132\024.network.VacantRooms\022/\n\017ma"
    "ke_order_info\030\n \001(\0132\026.network.MakeOrderI"
    "nfo\">\n\027RegisterMessageResponse\022\023\n\013messag"
    "eText\030\001 \001(\t\022\016\n\006status\030\002 \001(\010\"k\n\023AuthMessa"
    "geResponse\022\014\n\004role\030\001 \001(\005\022\020\n\010id_hotel\030\002 \001"
    "(\005\022\016\n\006status\030\003 \001(\010\022\023\n\013messageText\030\004 \001(\t\022"
    "\017\n\007id_user\030\005 \001(\005\"N\n\013SessionInfo\022\r\n\005login"
    "\030\001 \001(\t\022\016\n\006userId\030\002 \001(\003\022\014\n\004role\030\003 \001(\005\022\022\n\n"
    "session_id\030\004 \001(\t\")\n\030RoomTypesMessageResp"
    "onse\022\r\n\005types\030\001 \003(\t\"%\n\tHotelType\022\n\n\002id\030\001"
    " \001(\005\022\014\n\004name\030\002 \001(\t\">\n\031HotelTypesMessageR"
    "esponse\022!\n\005types\030\001 \003(\0132\022.network.HotelTy"
    "pe\"\320\004\n\017ResponseContext\022\022\n\nerror_code\030\001 \001"
    "(\005\022,\n\rmessage_type_\030\002 \001(\0162\025.network.mess"
    "age_type\022;\n\021register_response\030\003 \001(\0132 .ne"
    "twork.RegisterMessageResponse\0223\n\rauth_re"
    "sponse\030\004 \001(\0132\034.network.AuthMessageRespon"
    "se\022*\n\014session_info\030\005 \001(\0132\024.network.Sessi"
    "onInfo\022.\n\006guests\030\006 \001(\0132\036.network.GuestsM"
    "essageResponse\0224\n\temployees\030\007 \001(\0132!.netw"
    "ork.EmployeesMessageResponse\022.\n\006hotels\030\010"
    " \001(\0132\036.network.HotelsMessageResponse\022,\n\005"
    "rooms\030\t \001(\0132\035.network.RoomsMessageRespon"
    "se\0220\n\005types\030\n \001(\0132!.network.RoomTypesMes"
    "sageResponse\022.\n\006orders\030\013 \001(\0132\036.network.O"
    "rdersMessageResponse\0227\n\013hotel_types\030\014 \001("
    "\0132\".network.HotelTypesMessageResponse", 3277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  AuthMessage::default_instance_ = new AuthMessage();
  RegisterMessage::default_instance_ = new RegisterMessage();
  RegisterEmployeeMessage::default_instance_ = new RegisterEmployeeMessage();
  GuestInfo::default_instance_ = new GuestInfo();
  GuestsMessageResponse::default_instance_ = new GuestsMessageResponse();
  EmployeeInfo::default_instance_ = new EmployeeInfo();
  EmployeesMessageResponse::default_instance_ = new EmployeesMessageResponse();
  HotelId::default_instance_ = new HotelId();
  HotelInfo::default_instance_ = new HotelInfo();
  HotelsMessageResponse::default_instance_ = new HotelsMessageResponse();
  RoomInfo::default_instance_ = new RoomInfo();
  RoomsMessageResponse::default_instance_ = new RoomsMessageResponse();
  VacantRooms::default_instance_ = new VacantRooms();
  OrderInfo::default_instance_ = new OrderInfo();
  OrdersMessageResponse::default_instance_ = new OrdersMessageResponse();
  MakeOrderInfo::default_instance_ = new MakeOrderInfo();
  RequestContext::default_instance_ = new RequestContext();
  RegisterMessageResponse::default_instance_ = new RegisterMessageResponse();
  AuthMessageResponse::default_instance_ = new AuthMessageResponse();
  SessionInfo::default_instance_ = new SessionInfo();
  RoomTypesMessageResponse::default_instance_ = new RoomTypesMessageResponse();
  HotelType::default_instance_ = new HotelType();
  HotelTypesMessageResponse::default_instance_ = new HotelTypesMessageResponse();
  ResponseContext::default_instance_ = new ResponseContext();
  AuthMessage::default_instance_->InitAsDefaultInstance();
  RegisterMessage::default_instance_->InitAsDefaultInstance();
  RegisterEmployeeMessage::default_instance_->InitAsDefaultInstance();
  GuestInfo::default_instance_->InitAsDefaultInstance();
  GuestsMessageResponse::default_instance_->InitAsDefaultInstance();
  EmployeeInfo::default_instance_->InitAsDefaultInstance();
  EmployeesMessageResponse::default_instance_->InitAsDefaultInstance();
  HotelId::default_instance_->InitAsDefaultInstance();
  HotelInfo::default_instance_->InitAsDefaultInstance();
  HotelsMessageResponse::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  RoomsMessageResponse::default_instance_->InitAsDefaultInstance();
  VacantRooms::default_instance_->InitAsDefaultInstance();
  OrderInfo::default_instance_->InitAsDefaultInstance();
  OrdersMessageResponse::default_instance_->InitAsDefaultInstance();
  MakeOrderInfo::default_instance_->InitAsDefaultInstance();
  RequestContext::default_instance_->InitAsDefaultInstance();
  RegisterMessageResponse::default_instance_->InitAsDefaultInstance();
  AuthMessageResponse::default_instance_->InitAsDefaultInstance();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  RoomTypesMessageResponse::default_instance_->InitAsDefaultInstance();
  HotelType::default_instance_->InitAsDefaultInstance();
  HotelTypesMessageResponse::default_instance_->InitAsDefaultInstance();
  ResponseContext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthMessage::kLoginFieldNumber;
const int AuthMessage::kPassFieldNumber;
#endif  // !_MSC_VER

AuthMessage::AuthMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.AuthMessage)
}

void AuthMessage::InitAsDefaultInstance() {
}

AuthMessage::AuthMessage(const AuthMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.AuthMessage)
}

void AuthMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:network.AuthMessage)
  SharedDtor();
}

void AuthMessage::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (this != default_instance_) {
  }
}

void AuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthMessage_descriptor_;
}

const AuthMessage& AuthMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

AuthMessage* AuthMessage::default_instance_ = NULL;

AuthMessage* AuthMessage::New() const {
  return new AuthMessage;
}

void AuthMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.AuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.AuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.AuthMessage)
  return false;
#undef DO_
}

void AuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.AuthMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.AuthMessage)
}

::google::protobuf::uint8* AuthMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.AuthMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.AuthMessage)
  return target;
}

int AuthMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthMessage::MergeFrom(const AuthMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {

  return true;
}

void AuthMessage::Swap(AuthMessage* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthMessage_descriptor_;
  metadata.reflection = AuthMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMessage::kLoginFieldNumber;
const int RegisterMessage::kPassFieldNumber;
const int RegisterMessage::kFirstnameFieldNumber;
const int RegisterMessage::kSecondnameFieldNumber;
const int RegisterMessage::kLastnameFieldNumber;
const int RegisterMessage::kPhonenumberFieldNumber;
const int RegisterMessage::kPassportFieldNumber;
const int RegisterMessage::kRoleFieldNumber;
#endif  // !_MSC_VER

RegisterMessage::RegisterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterMessage)
}

void RegisterMessage::InitAsDefaultInstance() {
}

RegisterMessage::RegisterMessage(const RegisterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterMessage)
}

void RegisterMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMessage::~RegisterMessage() {
  // @@protoc_insertion_point(destructor:network.RegisterMessage)
  SharedDtor();
}

void RegisterMessage::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passport_;
  }
  if (this != default_instance_) {
  }
}

void RegisterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMessage_descriptor_;
}

const RegisterMessage& RegisterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegisterMessage* RegisterMessage::default_instance_ = NULL;

RegisterMessage* RegisterMessage::New() const {
  return new RegisterMessage;
}

void RegisterMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_passport()) {
      if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passport_->clear();
      }
    }
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_firstname;
        break;
      }

      // optional string firstname = 3;
      case 3: {
        if (tag == 26) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secondname;
        break;
      }

      // optional string secondname = 4;
      case 4: {
        if (tag == 34) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lastname;
        break;
      }

      // optional string lastname = 5;
      case 5: {
        if (tag == 42) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 6;
      case 6: {
        if (tag == 50) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_passport;
        break;
      }

      // optional string passport = 7;
      case 7: {
        if (tag == 58) {
         parse_passport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passport().data(), this->passport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_role;
        break;
      }

      // optional int32 role = 8;
      case 8: {
        if (tag == 64) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterMessage)
  return false;
#undef DO_
}

void RegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firstname(), output);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secondname(), output);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lastname(), output);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonenumber(), output);
  }

  // optional string passport = 7;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->passport(), output);
  }

  // optional int32 role = 8;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterMessage)
}

::google::protobuf::uint8* RegisterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secondname(), target);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lastname(), target);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phonenumber(), target);
  }

  // optional string passport = 7;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->passport(), target);
  }

  // optional int32 role = 8;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterMessage)
  return target;
}

int RegisterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string firstname = 3;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string secondname = 4;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondname());
    }

    // optional string lastname = 5;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string phonenumber = 6;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string passport = 7;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport());
    }

    // optional int32 role = 8;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMessage::MergeFrom(const RegisterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_passport()) {
      set_passport(from.passport());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMessage::CopyFrom(const RegisterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMessage::IsInitialized() const {

  return true;
}

void RegisterMessage::Swap(RegisterMessage* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(pass_, other->pass_);
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(lastname_, other->lastname_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(passport_, other->passport_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMessage_descriptor_;
  metadata.reflection = RegisterMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterEmployeeMessage::kLoginFieldNumber;
const int RegisterEmployeeMessage::kPassFieldNumber;
const int RegisterEmployeeMessage::kFirstnameFieldNumber;
const int RegisterEmployeeMessage::kSecondnameFieldNumber;
const int RegisterEmployeeMessage::kLastnameFieldNumber;
const int RegisterEmployeeMessage::kPhonenumberFieldNumber;
const int RegisterEmployeeMessage::kSalaryFieldNumber;
const int RegisterEmployeeMessage::kPositionFieldNumber;
const int RegisterEmployeeMessage::kHotelIdFieldNumber;
const int RegisterEmployeeMessage::kRoleFieldNumber;
#endif  // !_MSC_VER

RegisterEmployeeMessage::RegisterEmployeeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterEmployeeMessage)
}

void RegisterEmployeeMessage::InitAsDefaultInstance() {
}

RegisterEmployeeMessage::RegisterEmployeeMessage(const RegisterEmployeeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterEmployeeMessage)
}

void RegisterEmployeeMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salary_ = 0;
  position_ = 0;
  hotelid_ = 0;
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterEmployeeMessage::~RegisterEmployeeMessage() {
  // @@protoc_insertion_point(destructor:network.RegisterEmployeeMessage)
  SharedDtor();
}

void RegisterEmployeeMessage::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
  }
}

void RegisterEmployeeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterEmployeeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterEmployeeMessage_descriptor_;
}

const RegisterEmployeeMessage& RegisterEmployeeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegisterEmployeeMessage* RegisterEmployeeMessage::default_instance_ = NULL;

RegisterEmployeeMessage* RegisterEmployeeMessage::New() const {
  return new RegisterEmployeeMessage;
}

void RegisterEmployeeMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterEmployeeMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(salary_, position_);
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
  }
  ZR_(hotelid_, role_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterEmployeeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterEmployeeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_firstname;
        break;
      }

      // optional string firstname = 3;
      case 3: {
        if (tag == 26) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secondname;
        break;
      }

      // optional string secondname = 4;
      case 4: {
        if (tag == 34) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lastname;
        break;
      }

      // optional string lastname = 5;
      case 5: {
        if (tag == 42) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 6;
      case 6: {
        if (tag == 50) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_salary;
        break;
      }

      // optional int32 salary = 7;
      case 7: {
        if (tag == 56) {
         parse_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salary_)));
          set_has_salary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_position;
        break;
      }

      // optional int32 position = 8;
      case 8: {
        if (tag == 64) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hotelId;
        break;
      }

      // optional int32 hotelId = 9;
      case 9: {
        if (tag == 72) {
         parse_hotelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_role;
        break;
      }

      // optional int32 role = 10;
      case 10: {
        if (tag == 80) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterEmployeeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterEmployeeMessage)
  return false;
#undef DO_
}

void RegisterEmployeeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterEmployeeMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firstname(), output);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secondname(), output);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lastname(), output);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonenumber(), output);
  }

  // optional int32 salary = 7;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->salary(), output);
  }

  // optional int32 position = 8;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }

  // optional int32 hotelId = 9;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hotelid(), output);
  }

  // optional int32 role = 10;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterEmployeeMessage)
}

::google::protobuf::uint8* RegisterEmployeeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterEmployeeMessage)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }

  // optional string secondname = 4;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secondname(), target);
  }

  // optional string lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lastname(), target);
  }

  // optional string phonenumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phonenumber(), target);
  }

  // optional int32 salary = 7;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->salary(), target);
  }

  // optional int32 position = 8;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }

  // optional int32 hotelId = 9;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hotelid(), target);
  }

  // optional int32 role = 10;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterEmployeeMessage)
  return target;
}

int RegisterEmployeeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string firstname = 3;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string secondname = 4;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondname());
    }

    // optional string lastname = 5;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string phonenumber = 6;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional int32 salary = 7;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salary());
    }

    // optional int32 position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hotelId = 9;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

    // optional int32 role = 10;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterEmployeeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterEmployeeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterEmployeeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterEmployeeMessage::MergeFrom(const RegisterEmployeeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_salary()) {
      set_salary(from.salary());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterEmployeeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterEmployeeMessage::CopyFrom(const RegisterEmployeeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterEmployeeMessage::IsInitialized() const {

  return true;
}

void RegisterEmployeeMessage::Swap(RegisterEmployeeMessage* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(pass_, other->pass_);
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(lastname_, other->lastname_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(salary_, other->salary_);
    std::swap(position_, other->position_);
    std::swap(hotelid_, other->hotelid_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterEmployeeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterEmployeeMessage_descriptor_;
  metadata.reflection = RegisterEmployeeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuestInfo::kFirstnameFieldNumber;
const int GuestInfo::kSecondnameFieldNumber;
const int GuestInfo::kLastnameFieldNumber;
const int GuestInfo::kPhonenumberFieldNumber;
const int GuestInfo::kPassportFieldNumber;
const int GuestInfo::kIdFieldNumber;
#endif  // !_MSC_VER

GuestInfo::GuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.GuestInfo)
}

void GuestInfo::InitAsDefaultInstance() {
}

GuestInfo::GuestInfo(const GuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.GuestInfo)
}

void GuestInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuestInfo::~GuestInfo() {
  // @@protoc_insertion_point(destructor:network.GuestInfo)
  SharedDtor();
}

void GuestInfo::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passport_;
  }
  if (this != default_instance_) {
  }
}

void GuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuestInfo_descriptor_;
}

const GuestInfo& GuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

GuestInfo* GuestInfo::default_instance_ = NULL;

GuestInfo* GuestInfo::New() const {
  return new GuestInfo;
}

void GuestInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_passport()) {
      if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passport_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.GuestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secondname;
        break;
      }

      // optional string secondname = 2;
      case 2: {
        if (tag == 18) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }

      // optional string lastname = 3;
      case 3: {
        if (tag == 26) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 4;
      case 4: {
        if (tag == 34) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_passport;
        break;
      }

      // optional string passport = 5;
      case 5: {
        if (tag == 42) {
         parse_passport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passport().data(), this->passport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.GuestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.GuestInfo)
  return false;
#undef DO_
}

void GuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.GuestInfo)
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firstname(), output);
  }

  // optional string secondname = 2;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secondname(), output);
  }

  // optional string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lastname(), output);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phonenumber(), output);
  }

  // optional string passport = 5;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->passport(), output);
  }

  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.GuestInfo)
}

::google::protobuf::uint8* GuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GuestInfo)
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string secondname = 2;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secondname(), target);
  }

  // optional string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phonenumber(), target);
  }

  // optional string passport = 5;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passport(), target);
  }

  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GuestInfo)
  return target;
}

int GuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstname = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string secondname = 2;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondname());
    }

    // optional string lastname = 3;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string phonenumber = 4;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string passport = 5;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport());
    }

    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuestInfo::MergeFrom(const GuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_passport()) {
      set_passport(from.passport());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuestInfo::CopyFrom(const GuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestInfo::IsInitialized() const {

  return true;
}

void GuestInfo::Swap(GuestInfo* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(lastname_, other->lastname_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(passport_, other->passport_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuestInfo_descriptor_;
  metadata.reflection = GuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuestsMessageResponse::kGuestsFieldNumber;
#endif  // !_MSC_VER

GuestsMessageResponse::GuestsMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.GuestsMessageResponse)
}

void GuestsMessageResponse::InitAsDefaultInstance() {
}

GuestsMessageResponse::GuestsMessageResponse(const GuestsMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.GuestsMessageResponse)
}

void GuestsMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuestsMessageResponse::~GuestsMessageResponse() {
  // @@protoc_insertion_point(destructor:network.GuestsMessageResponse)
  SharedDtor();
}

void GuestsMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuestsMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuestsMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuestsMessageResponse_descriptor_;
}

const GuestsMessageResponse& GuestsMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

GuestsMessageResponse* GuestsMessageResponse::default_instance_ = NULL;

GuestsMessageResponse* GuestsMessageResponse::New() const {
  return new GuestsMessageResponse;
}

void GuestsMessageResponse::Clear() {
  guests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuestsMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.GuestsMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.GuestInfo guests = 1;
      case 1: {
        if (tag == 10) {
         parse_guests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_guests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.GuestsMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.GuestsMessageResponse)
  return false;
#undef DO_
}

void GuestsMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.GuestsMessageResponse)
  // repeated .network.GuestInfo guests = 1;
  for (int i = 0; i < this->guests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.GuestsMessageResponse)
}

::google::protobuf::uint8* GuestsMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GuestsMessageResponse)
  // repeated .network.GuestInfo guests = 1;
  for (int i = 0; i < this->guests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GuestsMessageResponse)
  return target;
}

int GuestsMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.GuestInfo guests = 1;
  total_size += 1 * this->guests_size();
  for (int i = 0; i < this->guests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuestsMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuestsMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuestsMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuestsMessageResponse::MergeFrom(const GuestsMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guests_.MergeFrom(from.guests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuestsMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuestsMessageResponse::CopyFrom(const GuestsMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestsMessageResponse::IsInitialized() const {

  return true;
}

void GuestsMessageResponse::Swap(GuestsMessageResponse* other) {
  if (other != this) {
    guests_.Swap(&other->guests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuestsMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuestsMessageResponse_descriptor_;
  metadata.reflection = GuestsMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeInfo::kFirstnameFieldNumber;
const int EmployeeInfo::kSecondnameFieldNumber;
const int EmployeeInfo::kLastnameFieldNumber;
const int EmployeeInfo::kPhonenumberFieldNumber;
const int EmployeeInfo::kSalaryFieldNumber;
const int EmployeeInfo::kPositionFieldNumber;
const int EmployeeInfo::kHotelIdFieldNumber;
const int EmployeeInfo::kIdFieldNumber;
#endif  // !_MSC_VER

EmployeeInfo::EmployeeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.EmployeeInfo)
}

void EmployeeInfo::InitAsDefaultInstance() {
}

EmployeeInfo::EmployeeInfo(const EmployeeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.EmployeeInfo)
}

void EmployeeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salary_ = 0;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeInfo::~EmployeeInfo() {
  // @@protoc_insertion_point(destructor:network.EmployeeInfo)
  SharedDtor();
}

void EmployeeInfo::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void EmployeeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeInfo_descriptor_;
}

const EmployeeInfo& EmployeeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

EmployeeInfo* EmployeeInfo::default_instance_ = NULL;

EmployeeInfo* EmployeeInfo::New() const {
  return new EmployeeInfo;
}

void EmployeeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmployeeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(salary_, id_);
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.EmployeeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secondname;
        break;
      }

      // optional string secondname = 2;
      case 2: {
        if (tag == 18) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondname().data(), this->secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }

      // optional string lastname = 3;
      case 3: {
        if (tag == 26) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 4;
      case 4: {
        if (tag == 34) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_salary;
        break;
      }

      // optional int32 salary = 5;
      case 5: {
        if (tag == 40) {
         parse_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salary_)));
          set_has_salary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional string position = 6;
      case 6: {
        if (tag == 50) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hotelId;
        break;
      }

      // optional int32 hotelId = 7;
      case 7: {
        if (tag == 56) {
         parse_hotelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (tag == 64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.EmployeeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.EmployeeInfo)
  return false;
#undef DO_
}

void EmployeeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.EmployeeInfo)
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firstname(), output);
  }

  // optional string secondname = 2;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secondname(), output);
  }

  // optional string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lastname(), output);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phonenumber(), output);
  }

  // optional int32 salary = 5;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->salary(), output);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->position(), output);
  }

  // optional int32 hotelId = 7;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hotelid(), output);
  }

  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.EmployeeInfo)
}

::google::protobuf::uint8* EmployeeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.EmployeeInfo)
  // optional string firstname = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string secondname = 2;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondname().data(), this->secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secondname(), target);
  }

  // optional string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phonenumber(), target);
  }

  // optional int32 salary = 5;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->salary(), target);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->position(), target);
  }

  // optional int32 hotelId = 7;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hotelid(), target);
  }

  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.EmployeeInfo)
  return target;
}

int EmployeeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstname = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string secondname = 2;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondname());
    }

    // optional string lastname = 3;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string phonenumber = 4;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional int32 salary = 5;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salary());
    }

    // optional string position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional int32 hotelId = 7;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeInfo::MergeFrom(const EmployeeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_salary()) {
      set_salary(from.salary());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeInfo::CopyFrom(const EmployeeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeInfo::IsInitialized() const {

  return true;
}

void EmployeeInfo::Swap(EmployeeInfo* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(lastname_, other->lastname_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(salary_, other->salary_);
    std::swap(position_, other->position_);
    std::swap(hotelid_, other->hotelid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeInfo_descriptor_;
  metadata.reflection = EmployeeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeesMessageResponse::kEmployeesFieldNumber;
#endif  // !_MSC_VER

EmployeesMessageResponse::EmployeesMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.EmployeesMessageResponse)
}

void EmployeesMessageResponse::InitAsDefaultInstance() {
}

EmployeesMessageResponse::EmployeesMessageResponse(const EmployeesMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.EmployeesMessageResponse)
}

void EmployeesMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeesMessageResponse::~EmployeesMessageResponse() {
  // @@protoc_insertion_point(destructor:network.EmployeesMessageResponse)
  SharedDtor();
}

void EmployeesMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmployeesMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeesMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeesMessageResponse_descriptor_;
}

const EmployeesMessageResponse& EmployeesMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

EmployeesMessageResponse* EmployeesMessageResponse::default_instance_ = NULL;

EmployeesMessageResponse* EmployeesMessageResponse::New() const {
  return new EmployeesMessageResponse;
}

void EmployeesMessageResponse::Clear() {
  employees_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeesMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.EmployeesMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.EmployeeInfo employees = 1;
      case 1: {
        if (tag == 10) {
         parse_employees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_employees()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_employees;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.EmployeesMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.EmployeesMessageResponse)
  return false;
#undef DO_
}

void EmployeesMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.EmployeesMessageResponse)
  // repeated .network.EmployeeInfo employees = 1;
  for (int i = 0; i < this->employees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->employees(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.EmployeesMessageResponse)
}

::google::protobuf::uint8* EmployeesMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.EmployeesMessageResponse)
  // repeated .network.EmployeeInfo employees = 1;
  for (int i = 0; i < this->employees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->employees(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.EmployeesMessageResponse)
  return target;
}

int EmployeesMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.EmployeeInfo employees = 1;
  total_size += 1 * this->employees_size();
  for (int i = 0; i < this->employees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->employees(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeesMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeesMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeesMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeesMessageResponse::MergeFrom(const EmployeesMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  employees_.MergeFrom(from.employees_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeesMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeesMessageResponse::CopyFrom(const EmployeesMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeesMessageResponse::IsInitialized() const {

  return true;
}

void EmployeesMessageResponse::Swap(EmployeesMessageResponse* other) {
  if (other != this) {
    employees_.Swap(&other->employees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeesMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeesMessageResponse_descriptor_;
  metadata.reflection = EmployeesMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotelId::kHotelIdFieldNumber;
#endif  // !_MSC_VER

HotelId::HotelId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HotelId)
}

void HotelId::InitAsDefaultInstance() {
}

HotelId::HotelId(const HotelId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HotelId)
}

void HotelId::SharedCtor() {
  _cached_size_ = 0;
  hotelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelId::~HotelId() {
  // @@protoc_insertion_point(destructor:network.HotelId)
  SharedDtor();
}

void HotelId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotelId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotelId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelId_descriptor_;
}

const HotelId& HotelId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HotelId* HotelId::default_instance_ = NULL;

HotelId* HotelId::New() const {
  return new HotelId;
}

void HotelId::Clear() {
  hotelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotelId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HotelId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hotelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HotelId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HotelId)
  return false;
#undef DO_
}

void HotelId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HotelId)
  // optional int32 hotelId = 1;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hotelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HotelId)
}

::google::protobuf::uint8* HotelId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HotelId)
  // optional int32 hotelId = 1;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hotelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HotelId)
  return target;
}

int HotelId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hotelId = 1;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotelId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotelId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotelId::MergeFrom(const HotelId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotelId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotelId::CopyFrom(const HotelId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelId::IsInitialized() const {

  return true;
}

void HotelId::Swap(HotelId* other) {
  if (other != this) {
    std::swap(hotelid_, other->hotelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotelId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotelId_descriptor_;
  metadata.reflection = HotelId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotelInfo::kNameFieldNumber;
const int HotelInfo::kCityFieldNumber;
const int HotelInfo::kStreetFieldNumber;
const int HotelInfo::kPhonenumberFieldNumber;
const int HotelInfo::kEmailFieldNumber;
const int HotelInfo::kStarsFieldNumber;
const int HotelInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

HotelInfo::HotelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HotelInfo)
}

void HotelInfo::InitAsDefaultInstance() {
}

HotelInfo::HotelInfo(const HotelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HotelInfo)
}

void HotelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stars_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelInfo::~HotelInfo() {
  // @@protoc_insertion_point(destructor:network.HotelInfo)
  SharedDtor();
}

void HotelInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void HotelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelInfo_descriptor_;
}

const HotelInfo& HotelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HotelInfo* HotelInfo::default_instance_ = NULL;

HotelInfo* HotelInfo::New() const {
  return new HotelInfo;
}

void HotelInfo::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        street_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    stars_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HotelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_street;
        break;
      }

      // optional string street = 3;
      case 3: {
        if (tag == 26) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 4;
      case 4: {
        if (tag == 34) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stars;
        break;
      }

      // optional int32 stars = 6;
      case 6: {
        if (tag == 48) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HotelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HotelInfo)
  return false;
#undef DO_
}

void HotelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HotelInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // optional string street = 3;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->street(), output);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phonenumber(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional int32 stars = 6;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stars(), output);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HotelInfo)
}

::google::protobuf::uint8* HotelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HotelInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // optional string street = 3;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->street(), target);
  }

  // optional string phonenumber = 4;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phonenumber(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional int32 stars = 6;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stars(), target);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HotelInfo)
  return target;
}

int HotelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string street = 3;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string phonenumber = 4;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 stars = 6;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stars());
    }

    // optional string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotelInfo::MergeFrom(const HotelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotelInfo::CopyFrom(const HotelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelInfo::IsInitialized() const {

  return true;
}

void HotelInfo::Swap(HotelInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(city_, other->city_);
    std::swap(street_, other->street_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(email_, other->email_);
    std::swap(stars_, other->stars_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotelInfo_descriptor_;
  metadata.reflection = HotelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotelsMessageResponse::kHotelsFieldNumber;
#endif  // !_MSC_VER

HotelsMessageResponse::HotelsMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HotelsMessageResponse)
}

void HotelsMessageResponse::InitAsDefaultInstance() {
}

HotelsMessageResponse::HotelsMessageResponse(const HotelsMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HotelsMessageResponse)
}

void HotelsMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelsMessageResponse::~HotelsMessageResponse() {
  // @@protoc_insertion_point(destructor:network.HotelsMessageResponse)
  SharedDtor();
}

void HotelsMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotelsMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotelsMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelsMessageResponse_descriptor_;
}

const HotelsMessageResponse& HotelsMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HotelsMessageResponse* HotelsMessageResponse::default_instance_ = NULL;

HotelsMessageResponse* HotelsMessageResponse::New() const {
  return new HotelsMessageResponse;
}

void HotelsMessageResponse::Clear() {
  hotels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotelsMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HotelsMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.HotelInfo hotels = 1;
      case 1: {
        if (tag == 10) {
         parse_hotels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hotels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HotelsMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HotelsMessageResponse)
  return false;
#undef DO_
}

void HotelsMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HotelsMessageResponse)
  // repeated .network.HotelInfo hotels = 1;
  for (int i = 0; i < this->hotels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hotels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HotelsMessageResponse)
}

::google::protobuf::uint8* HotelsMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HotelsMessageResponse)
  // repeated .network.HotelInfo hotels = 1;
  for (int i = 0; i < this->hotels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hotels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HotelsMessageResponse)
  return target;
}

int HotelsMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.HotelInfo hotels = 1;
  total_size += 1 * this->hotels_size();
  for (int i = 0; i < this->hotels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hotels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelsMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotelsMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotelsMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotelsMessageResponse::MergeFrom(const HotelsMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  hotels_.MergeFrom(from.hotels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotelsMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotelsMessageResponse::CopyFrom(const HotelsMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelsMessageResponse::IsInitialized() const {

  return true;
}

void HotelsMessageResponse::Swap(HotelsMessageResponse* other) {
  if (other != this) {
    hotels_.Swap(&other->hotels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotelsMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotelsMessageResponse_descriptor_;
  metadata.reflection = HotelsMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kPlacesFieldNumber;
const int RoomInfo::kPriceFieldNumber;
const int RoomInfo::kRatingFieldNumber;
const int RoomInfo::kStatusFieldNumber;
const int RoomInfo::kFloorFieldNumber;
const int RoomInfo::kTypeFieldNumber;
const int RoomInfo::kHotelIDFieldNumber;
const int RoomInfo::kIdFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  places_ = 0;
  price_ = 0;
  rating_ = 0;
  status_ = false;
  floor_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:network.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(places_, status_);
    ZR_(floor_, id_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 places = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &places_)));
          set_has_places();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rating;
        break;
      }

      // optional int32 rating = 3;
      case 3: {
        if (tag == 24) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional bool status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_floor;
        break;
      }

      // optional int32 floor = 5;
      case 5: {
        if (tag == 40) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hotelID;
        break;
      }

      // optional int32 hotelID = 7;
      case 7: {
        if (tag == 56) {
         parse_hotelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (tag == 64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomInfo)
  // optional int32 places = 1;
  if (has_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->places(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional int32 rating = 3;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rating(), output);
  }

  // optional bool status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->status(), output);
  }

  // optional int32 floor = 5;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->floor(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hotelid(), output);
  }

  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomInfo)
  // optional int32 places = 1;
  if (has_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->places(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional int32 rating = 3;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rating(), target);
  }

  // optional bool status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->status(), target);
  }

  // optional int32 floor = 5;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->floor(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hotelid(), target);
  }

  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 places = 1;
    if (has_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->places());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 rating = 3;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating());
    }

    // optional bool status = 4;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional int32 floor = 5;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 hotelID = 7;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_places()) {
      set_places(from.places());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(places_, other->places_);
    std::swap(price_, other->price_);
    std::swap(rating_, other->rating_);
    std::swap(status_, other->status_);
    std::swap(floor_, other->floor_);
    std::swap(type_, other->type_);
    std::swap(hotelid_, other->hotelid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomsMessageResponse::kRoomsFieldNumber;
#endif  // !_MSC_VER

RoomsMessageResponse::RoomsMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomsMessageResponse)
}

void RoomsMessageResponse::InitAsDefaultInstance() {
}

RoomsMessageResponse::RoomsMessageResponse(const RoomsMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomsMessageResponse)
}

void RoomsMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomsMessageResponse::~RoomsMessageResponse() {
  // @@protoc_insertion_point(destructor:network.RoomsMessageResponse)
  SharedDtor();
}

void RoomsMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsMessageResponse_descriptor_;
}

const RoomsMessageResponse& RoomsMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RoomsMessageResponse* RoomsMessageResponse::default_instance_ = NULL;

RoomsMessageResponse* RoomsMessageResponse::New() const {
  return new RoomsMessageResponse;
}

void RoomsMessageResponse::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomsMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomsMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.RoomInfo rooms = 1;
      case 1: {
        if (tag == 10) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomsMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomsMessageResponse)
  return false;
#undef DO_
}

void RoomsMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomsMessageResponse)
  // repeated .network.RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomsMessageResponse)
}

::google::protobuf::uint8* RoomsMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomsMessageResponse)
  // repeated .network.RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomsMessageResponse)
  return target;
}

int RoomsMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.RoomInfo rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomsMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomsMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsMessageResponse::MergeFrom(const RoomsMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomsMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsMessageResponse::CopyFrom(const RoomsMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsMessageResponse::IsInitialized() const {

  return true;
}

void RoomsMessageResponse::Swap(RoomsMessageResponse* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomsMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsMessageResponse_descriptor_;
  metadata.reflection = RoomsMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VacantRooms::kPlacesFieldNumber;
const int VacantRooms::kBeginPriceFieldNumber;
const int VacantRooms::kEndPriceFieldNumber;
const int VacantRooms::kDatebeginFieldNumber;
const int VacantRooms::kDateendFieldNumber;
const int VacantRooms::kHotelIDFieldNumber;
const int VacantRooms::kBeginRatingFieldNumber;
const int VacantRooms::kEndRatingFieldNumber;
const int VacantRooms::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

VacantRooms::VacantRooms()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.VacantRooms)
}

void VacantRooms::InitAsDefaultInstance() {
}

VacantRooms::VacantRooms(const VacantRooms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.VacantRooms)
}

void VacantRooms::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  places_ = 0;
  begin_price_ = 0;
  end_price_ = 0;
  datebegin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dateend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelid_ = 0;
  begin_rating_ = 0;
  end_rating_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VacantRooms::~VacantRooms() {
  // @@protoc_insertion_point(destructor:network.VacantRooms)
  SharedDtor();
}

void VacantRooms::SharedDtor() {
  if (datebegin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datebegin_;
  }
  if (dateend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dateend_;
  }
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void VacantRooms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VacantRooms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VacantRooms_descriptor_;
}

const VacantRooms& VacantRooms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

VacantRooms* VacantRooms::default_instance_ = NULL;

VacantRooms* VacantRooms::New() const {
  return new VacantRooms;
}

void VacantRooms::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VacantRooms*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(places_, begin_price_);
    ZR_(end_price_, hotelid_);
    ZR_(begin_rating_, end_rating_);
    if (has_datebegin()) {
      if (datebegin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datebegin_->clear();
      }
    }
    if (has_dateend()) {
      if (dateend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dateend_->clear();
      }
    }
  }
  if (has_room_type()) {
    if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_type_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VacantRooms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.VacantRooms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 places = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &places_)));
          set_has_places();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_price;
        break;
      }

      // optional int32 begin_price = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_price_)));
          set_has_begin_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_price;
        break;
      }

      // optional int32 end_price = 3;
      case 3: {
        if (tag == 24) {
         parse_end_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_price_)));
          set_has_end_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datebegin;
        break;
      }

      // optional string datebegin = 5;
      case 5: {
        if (tag == 42) {
         parse_datebegin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datebegin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datebegin().data(), this->datebegin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "datebegin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dateend;
        break;
      }

      // optional string dateend = 6;
      case 6: {
        if (tag == 50) {
         parse_dateend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dateend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dateend().data(), this->dateend().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dateend");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hotelID;
        break;
      }

      // optional int32 hotelID = 7;
      case 7: {
        if (tag == 56) {
         parse_hotelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_begin_rating;
        break;
      }

      // optional int32 begin_rating = 8;
      case 8: {
        if (tag == 64) {
         parse_begin_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_rating_)));
          set_has_begin_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_end_rating;
        break;
      }

      // optional int32 end_rating = 9;
      case 9: {
        if (tag == 72) {
         parse_end_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_rating_)));
          set_has_end_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_room_type;
        break;
      }

      // optional string room_type = 10;
      case 10: {
        if (tag == 82) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.VacantRooms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.VacantRooms)
  return false;
#undef DO_
}

void VacantRooms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.VacantRooms)
  // optional int32 places = 1;
  if (has_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->places(), output);
  }

  // optional int32 begin_price = 2;
  if (has_begin_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_price(), output);
  }

  // optional int32 end_price = 3;
  if (has_end_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_price(), output);
  }

  // optional string datebegin = 5;
  if (has_datebegin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datebegin().data(), this->datebegin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "datebegin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->datebegin(), output);
  }

  // optional string dateend = 6;
  if (has_dateend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dateend().data(), this->dateend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dateend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dateend(), output);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hotelid(), output);
  }

  // optional int32 begin_rating = 8;
  if (has_begin_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->begin_rating(), output);
  }

  // optional int32 end_rating = 9;
  if (has_end_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->end_rating(), output);
  }

  // optional string room_type = 10;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.VacantRooms)
}

::google::protobuf::uint8* VacantRooms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.VacantRooms)
  // optional int32 places = 1;
  if (has_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->places(), target);
  }

  // optional int32 begin_price = 2;
  if (has_begin_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_price(), target);
  }

  // optional int32 end_price = 3;
  if (has_end_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_price(), target);
  }

  // optional string datebegin = 5;
  if (has_datebegin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datebegin().data(), this->datebegin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "datebegin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->datebegin(), target);
  }

  // optional string dateend = 6;
  if (has_dateend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dateend().data(), this->dateend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dateend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dateend(), target);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hotelid(), target);
  }

  // optional int32 begin_rating = 8;
  if (has_begin_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->begin_rating(), target);
  }

  // optional int32 end_rating = 9;
  if (has_end_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->end_rating(), target);
  }

  // optional string room_type = 10;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.VacantRooms)
  return target;
}

int VacantRooms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 places = 1;
    if (has_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->places());
    }

    // optional int32 begin_price = 2;
    if (has_begin_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_price());
    }

    // optional int32 end_price = 3;
    if (has_end_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_price());
    }

    // optional string datebegin = 5;
    if (has_datebegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datebegin());
    }

    // optional string dateend = 6;
    if (has_dateend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dateend());
    }

    // optional int32 hotelID = 7;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

    // optional int32 begin_rating = 8;
    if (has_begin_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_rating());
    }

    // optional int32 end_rating = 9;
    if (has_end_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_rating());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string room_type = 10;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VacantRooms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VacantRooms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VacantRooms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VacantRooms::MergeFrom(const VacantRooms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_places()) {
      set_places(from.places());
    }
    if (from.has_begin_price()) {
      set_begin_price(from.begin_price());
    }
    if (from.has_end_price()) {
      set_end_price(from.end_price());
    }
    if (from.has_datebegin()) {
      set_datebegin(from.datebegin());
    }
    if (from.has_dateend()) {
      set_dateend(from.dateend());
    }
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
    if (from.has_begin_rating()) {
      set_begin_rating(from.begin_rating());
    }
    if (from.has_end_rating()) {
      set_end_rating(from.end_rating());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VacantRooms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VacantRooms::CopyFrom(const VacantRooms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VacantRooms::IsInitialized() const {

  return true;
}

void VacantRooms::Swap(VacantRooms* other) {
  if (other != this) {
    std::swap(places_, other->places_);
    std::swap(begin_price_, other->begin_price_);
    std::swap(end_price_, other->end_price_);
    std::swap(datebegin_, other->datebegin_);
    std::swap(dateend_, other->dateend_);
    std::swap(hotelid_, other->hotelid_);
    std::swap(begin_rating_, other->begin_rating_);
    std::swap(end_rating_, other->end_rating_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VacantRooms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VacantRooms_descriptor_;
  metadata.reflection = VacantRooms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfo::kIdFieldNumber;
const int OrderInfo::kStartdateFieldNumber;
const int OrderInfo::kEnddateFieldNumber;
const int OrderInfo::kIdroomFieldNumber;
const int OrderInfo::kEmployeeSecondnameFieldNumber;
const int OrderInfo::kGuestSecondnameFieldNumber;
const int OrderInfo::kHotelIDFieldNumber;
const int OrderInfo::kEmployeeIdFieldNumber;
const int OrderInfo::kGuestIdFieldNumber;
#endif  // !_MSC_VER

OrderInfo::OrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.OrderInfo)
}

void OrderInfo::InitAsDefaultInstance() {
}

OrderInfo::OrderInfo(const OrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.OrderInfo)
}

void OrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idroom_ = 0;
  employee_secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guest_secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelid_ = 0;
  employee_id_ = 0;
  guest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfo::~OrderInfo() {
  // @@protoc_insertion_point(destructor:network.OrderInfo)
  SharedDtor();
}

void OrderInfo::SharedDtor() {
  if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enddate_;
  }
  if (employee_secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete employee_secondname_;
  }
  if (guest_secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guest_secondname_;
  }
  if (this != default_instance_) {
  }
}

void OrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfo_descriptor_;
}

const OrderInfo& OrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

OrderInfo* OrderInfo::default_instance_ = NULL;

OrderInfo* OrderInfo::New() const {
  return new OrderInfo;
}

void OrderInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, idroom_);
    ZR_(hotelid_, employee_id_);
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startdate_->clear();
      }
    }
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enddate_->clear();
      }
    }
    if (has_employee_secondname()) {
      if (employee_secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        employee_secondname_->clear();
      }
    }
    if (has_guest_secondname()) {
      if (guest_secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guest_secondname_->clear();
      }
    }
  }
  guest_id_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.OrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_startdate;
        break;
      }

      // optional string startdate = 2;
      case 2: {
        if (tag == 18) {
         parse_startdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_enddate;
        break;
      }

      // optional string enddate = 3;
      case 3: {
        if (tag == 26) {
         parse_enddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enddate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idroom;
        break;
      }

      // optional int32 idroom = 4;
      case 4: {
        if (tag == 32) {
         parse_idroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idroom_)));
          set_has_idroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_employee_secondname;
        break;
      }

      // optional string employee_secondname = 5;
      case 5: {
        if (tag == 42) {
         parse_employee_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_employee_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->employee_secondname().data(), this->employee_secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "employee_secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guest_secondname;
        break;
      }

      // optional string guest_secondname = 6;
      case 6: {
        if (tag == 50) {
         parse_guest_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guest_secondname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guest_secondname().data(), this->guest_secondname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guest_secondname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hotelID;
        break;
      }

      // optional int32 hotelID = 7;
      case 7: {
        if (tag == 56) {
         parse_hotelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotelid_)));
          set_has_hotelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_employee_id;
        break;
      }

      // optional int32 employee_id = 8;
      case 8: {
        if (tag == 64) {
         parse_employee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &employee_id_)));
          set_has_employee_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_guest_id;
        break;
      }

      // optional int32 guest_id = 9;
      case 9: {
        if (tag == 72) {
         parse_guest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guest_id_)));
          set_has_guest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.OrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.OrderInfo)
  return false;
#undef DO_
}

void OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.OrderInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string startdate = 2;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->startdate(), output);
  }

  // optional string enddate = 3;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->enddate(), output);
  }

  // optional int32 idroom = 4;
  if (has_idroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->idroom(), output);
  }

  // optional string employee_secondname = 5;
  if (has_employee_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->employee_secondname().data(), this->employee_secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "employee_secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->employee_secondname(), output);
  }

  // optional string guest_secondname = 6;
  if (has_guest_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guest_secondname().data(), this->guest_secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guest_secondname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guest_secondname(), output);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hotelid(), output);
  }

  // optional int32 employee_id = 8;
  if (has_employee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->employee_id(), output);
  }

  // optional int32 guest_id = 9;
  if (has_guest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.OrderInfo)
}

::google::protobuf::uint8* OrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.OrderInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string startdate = 2;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->startdate(), target);
  }

  // optional string enddate = 3;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enddate(), target);
  }

  // optional int32 idroom = 4;
  if (has_idroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->idroom(), target);
  }

  // optional string employee_secondname = 5;
  if (has_employee_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->employee_secondname().data(), this->employee_secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "employee_secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->employee_secondname(), target);
  }

  // optional string guest_secondname = 6;
  if (has_guest_secondname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guest_secondname().data(), this->guest_secondname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guest_secondname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guest_secondname(), target);
  }

  // optional int32 hotelID = 7;
  if (has_hotelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hotelid(), target);
  }

  // optional int32 employee_id = 8;
  if (has_employee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->employee_id(), target);
  }

  // optional int32 guest_id = 9;
  if (has_guest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.OrderInfo)
  return target;
}

int OrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string startdate = 2;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional string enddate = 3;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

    // optional int32 idroom = 4;
    if (has_idroom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idroom());
    }

    // optional string employee_secondname = 5;
    if (has_employee_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->employee_secondname());
    }

    // optional string guest_secondname = 6;
    if (has_guest_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guest_secondname());
    }

    // optional int32 hotelID = 7;
    if (has_hotelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotelid());
    }

    // optional int32 employee_id = 8;
    if (has_employee_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->employee_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 guest_id = 9;
    if (has_guest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderInfo::MergeFrom(const OrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_idroom()) {
      set_idroom(from.idroom());
    }
    if (from.has_employee_secondname()) {
      set_employee_secondname(from.employee_secondname());
    }
    if (from.has_guest_secondname()) {
      set_guest_secondname(from.guest_secondname());
    }
    if (from.has_hotelid()) {
      set_hotelid(from.hotelid());
    }
    if (from.has_employee_id()) {
      set_employee_id(from.employee_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guest_id()) {
      set_guest_id(from.guest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {

  return true;
}

void OrderInfo::Swap(OrderInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(idroom_, other->idroom_);
    std::swap(employee_secondname_, other->employee_secondname_);
    std::swap(guest_secondname_, other->guest_secondname_);
    std::swap(hotelid_, other->hotelid_);
    std::swap(employee_id_, other->employee_id_);
    std::swap(guest_id_, other->guest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfo_descriptor_;
  metadata.reflection = OrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrdersMessageResponse::kOrdersFieldNumber;
#endif  // !_MSC_VER

OrdersMessageResponse::OrdersMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.OrdersMessageResponse)
}

void OrdersMessageResponse::InitAsDefaultInstance() {
}

OrdersMessageResponse::OrdersMessageResponse(const OrdersMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.OrdersMessageResponse)
}

void OrdersMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdersMessageResponse::~OrdersMessageResponse() {
  // @@protoc_insertion_point(destructor:network.OrdersMessageResponse)
  SharedDtor();
}

void OrdersMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdersMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdersMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdersMessageResponse_descriptor_;
}

const OrdersMessageResponse& OrdersMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

OrdersMessageResponse* OrdersMessageResponse::default_instance_ = NULL;

OrdersMessageResponse* OrdersMessageResponse::New() const {
  return new OrdersMessageResponse;
}

void OrdersMessageResponse::Clear() {
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrdersMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.OrdersMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.OrderInfo orders = 1;
      case 1: {
        if (tag == 10) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_orders;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.OrdersMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.OrdersMessageResponse)
  return false;
#undef DO_
}

void OrdersMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.OrdersMessageResponse)
  // repeated .network.OrderInfo orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.OrdersMessageResponse)
}

::google::protobuf::uint8* OrdersMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.OrdersMessageResponse)
  // repeated .network.OrderInfo orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.OrdersMessageResponse)
  return target;
}

int OrdersMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.OrderInfo orders = 1;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdersMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrdersMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrdersMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrdersMessageResponse::MergeFrom(const OrdersMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrdersMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersMessageResponse::CopyFrom(const OrdersMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersMessageResponse::IsInitialized() const {

  return true;
}

void OrdersMessageResponse::Swap(OrdersMessageResponse* other) {
  if (other != this) {
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrdersMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdersMessageResponse_descriptor_;
  metadata.reflection = OrdersMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeOrderInfo::kStartdateFieldNumber;
const int MakeOrderInfo::kEnddateFieldNumber;
const int MakeOrderInfo::kIdroomFieldNumber;
const int MakeOrderInfo::kIdemployeeFieldNumber;
const int MakeOrderInfo::kIdguestFieldNumber;
#endif  // !_MSC_VER

MakeOrderInfo::MakeOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.MakeOrderInfo)
}

void MakeOrderInfo::InitAsDefaultInstance() {
}

MakeOrderInfo::MakeOrderInfo(const MakeOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.MakeOrderInfo)
}

void MakeOrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idroom_ = 0;
  idemployee_ = 0;
  idguest_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeOrderInfo::~MakeOrderInfo() {
  // @@protoc_insertion_point(destructor:network.MakeOrderInfo)
  SharedDtor();
}

void MakeOrderInfo::SharedDtor() {
  if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enddate_;
  }
  if (this != default_instance_) {
  }
}

void MakeOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeOrderInfo_descriptor_;
}

const MakeOrderInfo& MakeOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

MakeOrderInfo* MakeOrderInfo::default_instance_ = NULL;

MakeOrderInfo* MakeOrderInfo::New() const {
  return new MakeOrderInfo;
}

void MakeOrderInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MakeOrderInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(idroom_, idguest_);
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startdate_->clear();
      }
    }
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enddate_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.MakeOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string startdate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enddate;
        break;
      }

      // optional string enddate = 2;
      case 2: {
        if (tag == 18) {
         parse_enddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enddate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idroom;
        break;
      }

      // optional int32 idroom = 3;
      case 3: {
        if (tag == 24) {
         parse_idroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idroom_)));
          set_has_idroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idemployee;
        break;
      }

      // optional int32 idemployee = 4;
      case 4: {
        if (tag == 32) {
         parse_idemployee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idemployee_)));
          set_has_idemployee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_idguest;
        break;
      }

      // optional int32 idguest = 5;
      case 5: {
        if (tag == 40) {
         parse_idguest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idguest_)));
          set_has_idguest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.MakeOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.MakeOrderInfo)
  return false;
#undef DO_
}

void MakeOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.MakeOrderInfo)
  // optional string startdate = 1;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->startdate(), output);
  }

  // optional string enddate = 2;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enddate(), output);
  }

  // optional int32 idroom = 3;
  if (has_idroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idroom(), output);
  }

  // optional int32 idemployee = 4;
  if (has_idemployee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->idemployee(), output);
  }

  // optional int32 idguest = 5;
  if (has_idguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idguest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.MakeOrderInfo)
}

::google::protobuf::uint8* MakeOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.MakeOrderInfo)
  // optional string startdate = 1;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->startdate(), target);
  }

  // optional string enddate = 2;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enddate(), target);
  }

  // optional int32 idroom = 3;
  if (has_idroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idroom(), target);
  }

  // optional int32 idemployee = 4;
  if (has_idemployee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->idemployee(), target);
  }

  // optional int32 idguest = 5;
  if (has_idguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idguest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.MakeOrderInfo)
  return target;
}

int MakeOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string startdate = 1;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional string enddate = 2;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

    // optional int32 idroom = 3;
    if (has_idroom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idroom());
    }

    // optional int32 idemployee = 4;
    if (has_idemployee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idemployee());
    }

    // optional int32 idguest = 5;
    if (has_idguest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idguest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeOrderInfo::MergeFrom(const MakeOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_idroom()) {
      set_idroom(from.idroom());
    }
    if (from.has_idemployee()) {
      set_idemployee(from.idemployee());
    }
    if (from.has_idguest()) {
      set_idguest(from.idguest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeOrderInfo::CopyFrom(const MakeOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeOrderInfo::IsInitialized() const {

  return true;
}

void MakeOrderInfo::Swap(MakeOrderInfo* other) {
  if (other != this) {
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(idroom_, other->idroom_);
    std::swap(idemployee_, other->idemployee_);
    std::swap(idguest_, other->idguest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeOrderInfo_descriptor_;
  metadata.reflection = MakeOrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestContext::kMessageTypeFieldNumber;
const int RequestContext::kAuthMessageFieldNumber;
const int RequestContext::kRegisterMessageFieldNumber;
const int RequestContext::kRegisterEmployeeMessageFieldNumber;
const int RequestContext::kSessionInfoFieldNumber;
const int RequestContext::kHotelIdFieldNumber;
const int RequestContext::kEmployeeInfoFieldNumber;
const int RequestContext::kRoomInfoFieldNumber;
const int RequestContext::kDataFieldNumber;
const int RequestContext::kMakeOrderInfoFieldNumber;
#endif  // !_MSC_VER

RequestContext::RequestContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RequestContext)
}

void RequestContext::InitAsDefaultInstance() {
  auth_message__ = const_cast< ::network::AuthMessage*>(&::network::AuthMessage::default_instance());
  register_message__ = const_cast< ::network::RegisterMessage*>(&::network::RegisterMessage::default_instance());
  register_employee_message__ = const_cast< ::network::RegisterEmployeeMessage*>(&::network::RegisterEmployeeMessage::default_instance());
  session_info_ = const_cast< ::network::SessionInfo*>(&::network::SessionInfo::default_instance());
  hotel_id_ = const_cast< ::network::HotelId*>(&::network::HotelId::default_instance());
  employee_info_ = const_cast< ::network::EmployeeInfo*>(&::network::EmployeeInfo::default_instance());
  room_info_ = const_cast< ::network::RoomInfo*>(&::network::RoomInfo::default_instance());
  data_ = const_cast< ::network::VacantRooms*>(&::network::VacantRooms::default_instance());
  make_order_info_ = const_cast< ::network::MakeOrderInfo*>(&::network::MakeOrderInfo::default_instance());
}

RequestContext::RequestContext(const RequestContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RequestContext)
}

void RequestContext::SharedCtor() {
  _cached_size_ = 0;
  message_type__ = 0;
  auth_message__ = NULL;
  register_message__ = NULL;
  register_employee_message__ = NULL;
  session_info_ = NULL;
  hotel_id_ = NULL;
  employee_info_ = NULL;
  room_info_ = NULL;
  data_ = NULL;
  make_order_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestContext::~RequestContext() {
  // @@protoc_insertion_point(destructor:network.RequestContext)
  SharedDtor();
}

void RequestContext::SharedDtor() {
  if (this != default_instance_) {
    delete auth_message__;
    delete register_message__;
    delete register_employee_message__;
    delete session_info_;
    delete hotel_id_;
    delete employee_info_;
    delete room_info_;
    delete data_;
    delete make_order_info_;
  }
}

void RequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestContext_descriptor_;
}

const RequestContext& RequestContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RequestContext* RequestContext::default_instance_ = NULL;

RequestContext* RequestContext::New() const {
  return new RequestContext;
}

void RequestContext::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    message_type__ = 0;
    if (has_auth_message_()) {
      if (auth_message__ != NULL) auth_message__->::network::AuthMessage::Clear();
    }
    if (has_register_message_()) {
      if (register_message__ != NULL) register_message__->::network::RegisterMessage::Clear();
    }
    if (has_register_employee_message_()) {
      if (register_employee_message__ != NULL) register_employee_message__->::network::RegisterEmployeeMessage::Clear();
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
    }
    if (has_hotel_id()) {
      if (hotel_id_ != NULL) hotel_id_->::network::HotelId::Clear();
    }
    if (has_employee_info()) {
      if (employee_info_ != NULL) employee_info_->::network::EmployeeInfo::Clear();
    }
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::network::RoomInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_data()) {
      if (data_ != NULL) data_->::network::VacantRooms::Clear();
    }
    if (has_make_order_info()) {
      if (make_order_info_ != NULL) make_order_info_->::network::MakeOrderInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.message_type message_type_ = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::message_type_IsValid(value)) {
            set_message_type_(static_cast< ::network::message_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth_message_;
        break;
      }

      // optional .network.AuthMessage auth_message_ = 2;
      case 2: {
        if (tag == 18) {
         parse_auth_message_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_message_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_register_message_;
        break;
      }

      // optional .network.RegisterMessage register_message_ = 3;
      case 3: {
        if (tag == 26) {
         parse_register_message_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_message_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_register_employee_message_;
        break;
      }

      // optional .network.RegisterEmployeeMessage register_employee_message_ = 4;
      case 4: {
        if (tag == 34) {
         parse_register_employee_message_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_employee_message_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session_info;
        break;
      }

      // optional .network.SessionInfo session_info = 5;
      case 5: {
        if (tag == 42) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hotel_id;
        break;
      }

      // optional .network.HotelId hotel_id = 6;
      case 6: {
        if (tag == 50) {
         parse_hotel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_employee_info;
        break;
      }

      // optional .network.EmployeeInfo employee_info = 7;
      case 7: {
        if (tag == 58) {
         parse_employee_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_employee_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_room_info;
        break;
      }

      // optional .network.RoomInfo room_info = 8;
      case 8: {
        if (tag == 66) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional .network.VacantRooms data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_make_order_info;
        break;
      }

      // optional .network.MakeOrderInfo make_order_info = 10;
      case 10: {
        if (tag == 82) {
         parse_make_order_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_order_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RequestContext)
  return false;
#undef DO_
}

void RequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RequestContext)
  // optional .network.message_type message_type_ = 1;
  if (has_message_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type_(), output);
  }

  // optional .network.AuthMessage auth_message_ = 2;
  if (has_auth_message_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auth_message_(), output);
  }

  // optional .network.RegisterMessage register_message_ = 3;
  if (has_register_message_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->register_message_(), output);
  }

  // optional .network.RegisterEmployeeMessage register_employee_message_ = 4;
  if (has_register_employee_message_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->register_employee_message_(), output);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_info(), output);
  }

  // optional .network.HotelId hotel_id = 6;
  if (has_hotel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hotel_id(), output);
  }

  // optional .network.EmployeeInfo employee_info = 7;
  if (has_employee_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->employee_info(), output);
  }

  // optional .network.RoomInfo room_info = 8;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->room_info(), output);
  }

  // optional .network.VacantRooms data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(), output);
  }

  // optional .network.MakeOrderInfo make_order_info = 10;
  if (has_make_order_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->make_order_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RequestContext)
}

::google::protobuf::uint8* RequestContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RequestContext)
  // optional .network.message_type message_type_ = 1;
  if (has_message_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type_(), target);
  }

  // optional .network.AuthMessage auth_message_ = 2;
  if (has_auth_message_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->auth_message_(), target);
  }

  // optional .network.RegisterMessage register_message_ = 3;
  if (has_register_message_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->register_message_(), target);
  }

  // optional .network.RegisterEmployeeMessage register_employee_message_ = 4;
  if (has_register_employee_message_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->register_employee_message_(), target);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_info(), target);
  }

  // optional .network.HotelId hotel_id = 6;
  if (has_hotel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hotel_id(), target);
  }

  // optional .network.EmployeeInfo employee_info = 7;
  if (has_employee_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->employee_info(), target);
  }

  // optional .network.RoomInfo room_info = 8;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->room_info(), target);
  }

  // optional .network.VacantRooms data = 9;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(), target);
  }

  // optional .network.MakeOrderInfo make_order_info = 10;
  if (has_make_order_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->make_order_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RequestContext)
  return target;
}

int RequestContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .network.message_type message_type_ = 1;
    if (has_message_type_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type_());
    }

    // optional .network.AuthMessage auth_message_ = 2;
    if (has_auth_message_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_message_());
    }

    // optional .network.RegisterMessage register_message_ = 3;
    if (has_register_message_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_message_());
    }

    // optional .network.RegisterEmployeeMessage register_employee_message_ = 4;
    if (has_register_employee_message_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_employee_message_());
    }

    // optional .network.SessionInfo session_info = 5;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

    // optional .network.HotelId hotel_id = 6;
    if (has_hotel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotel_id());
    }

    // optional .network.EmployeeInfo employee_info = 7;
    if (has_employee_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->employee_info());
    }

    // optional .network.RoomInfo room_info = 8;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .network.VacantRooms data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .network.MakeOrderInfo make_order_info = 10;
    if (has_make_order_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_order_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestContext::MergeFrom(const RequestContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type_()) {
      set_message_type_(from.message_type_());
    }
    if (from.has_auth_message_()) {
      mutable_auth_message_()->::network::AuthMessage::MergeFrom(from.auth_message_());
    }
    if (from.has_register_message_()) {
      mutable_register_message_()->::network::RegisterMessage::MergeFrom(from.register_message_());
    }
    if (from.has_register_employee_message_()) {
      mutable_register_employee_message_()->::network::RegisterEmployeeMessage::MergeFrom(from.register_employee_message_());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::network::SessionInfo::MergeFrom(from.session_info());
    }
    if (from.has_hotel_id()) {
      mutable_hotel_id()->::network::HotelId::MergeFrom(from.hotel_id());
    }
    if (from.has_employee_info()) {
      mutable_employee_info()->::network::EmployeeInfo::MergeFrom(from.employee_info());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::network::RoomInfo::MergeFrom(from.room_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      mutable_data()->::network::VacantRooms::MergeFrom(from.data());
    }
    if (from.has_make_order_info()) {
      mutable_make_order_info()->::network::MakeOrderInfo::MergeFrom(from.make_order_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestContext::CopyFrom(const RequestContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestContext::IsInitialized() const {

  return true;
}

void RequestContext::Swap(RequestContext* other) {
  if (other != this) {
    std::swap(message_type__, other->message_type__);
    std::swap(auth_message__, other->auth_message__);
    std::swap(register_message__, other->register_message__);
    std::swap(register_employee_message__, other->register_employee_message__);
    std::swap(session_info_, other->session_info_);
    std::swap(hotel_id_, other->hotel_id_);
    std::swap(employee_info_, other->employee_info_);
    std::swap(room_info_, other->room_info_);
    std::swap(data_, other->data_);
    std::swap(make_order_info_, other->make_order_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestContext_descriptor_;
  metadata.reflection = RequestContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMessageResponse::kMessageTextFieldNumber;
const int RegisterMessageResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

RegisterMessageResponse::RegisterMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RegisterMessageResponse)
}

void RegisterMessageResponse::InitAsDefaultInstance() {
}

RegisterMessageResponse::RegisterMessageResponse(const RegisterMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RegisterMessageResponse)
}

void RegisterMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMessageResponse::~RegisterMessageResponse() {
  // @@protoc_insertion_point(destructor:network.RegisterMessageResponse)
  SharedDtor();
}

void RegisterMessageResponse::SharedDtor() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (this != default_instance_) {
  }
}

void RegisterMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMessageResponse_descriptor_;
}

const RegisterMessageResponse& RegisterMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegisterMessageResponse* RegisterMessageResponse::default_instance_ = NULL;

RegisterMessageResponse* RegisterMessageResponse::New() const {
  return new RegisterMessageResponse;
}

void RegisterMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_messagetext()) {
      if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetext_->clear();
      }
    }
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RegisterMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messageText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), this->messagetext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RegisterMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RegisterMessageResponse)
  return false;
#undef DO_
}

void RegisterMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RegisterMessageResponse)
  // optional string messageText = 1;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagetext(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RegisterMessageResponse)
}

::google::protobuf::uint8* RegisterMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RegisterMessageResponse)
  // optional string messageText = 1;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagetext(), target);
  }

  // optional bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RegisterMessageResponse)
  return target;
}

int RegisterMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string messageText = 1;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

    // optional bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMessageResponse::MergeFrom(const RegisterMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetext()) {
      set_messagetext(from.messagetext());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMessageResponse::CopyFrom(const RegisterMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMessageResponse::IsInitialized() const {

  return true;
}

void RegisterMessageResponse::Swap(RegisterMessageResponse* other) {
  if (other != this) {
    std::swap(messagetext_, other->messagetext_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMessageResponse_descriptor_;
  metadata.reflection = RegisterMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthMessageResponse::kRoleFieldNumber;
const int AuthMessageResponse::kIdHotelFieldNumber;
const int AuthMessageResponse::kStatusFieldNumber;
const int AuthMessageResponse::kMessageTextFieldNumber;
const int AuthMessageResponse::kIdUserFieldNumber;
#endif  // !_MSC_VER

AuthMessageResponse::AuthMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.AuthMessageResponse)
}

void AuthMessageResponse::InitAsDefaultInstance() {
}

AuthMessageResponse::AuthMessageResponse(const AuthMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.AuthMessageResponse)
}

void AuthMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_ = 0;
  id_hotel_ = 0;
  status_ = false;
  messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_user_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthMessageResponse::~AuthMessageResponse() {
  // @@protoc_insertion_point(destructor:network.AuthMessageResponse)
  SharedDtor();
}

void AuthMessageResponse::SharedDtor() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (this != default_instance_) {
  }
}

void AuthMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthMessageResponse_descriptor_;
}

const AuthMessageResponse& AuthMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

AuthMessageResponse* AuthMessageResponse::default_instance_ = NULL;

AuthMessageResponse* AuthMessageResponse::New() const {
  return new AuthMessageResponse;
}

void AuthMessageResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthMessageResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(role_, id_hotel_);
    ZR_(status_, id_user_);
    if (has_messagetext()) {
      if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.AuthMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_hotel;
        break;
      }

      // optional int32 id_hotel = 2;
      case 2: {
        if (tag == 16) {
         parse_id_hotel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_hotel_)));
          set_has_id_hotel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messageText;
        break;
      }

      // optional string messageText = 4;
      case 4: {
        if (tag == 34) {
         parse_messageText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), this->messagetext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id_user;
        break;
      }

      // optional int32 id_user = 5;
      case 5: {
        if (tag == 40) {
         parse_id_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_user_)));
          set_has_id_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.AuthMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.AuthMessageResponse)
  return false;
#undef DO_
}

void AuthMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.AuthMessageResponse)
  // optional int32 role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role(), output);
  }

  // optional int32 id_hotel = 2;
  if (has_id_hotel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_hotel(), output);
  }

  // optional bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // optional string messageText = 4;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messagetext(), output);
  }

  // optional int32 id_user = 5;
  if (has_id_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.AuthMessageResponse)
}

::google::protobuf::uint8* AuthMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.AuthMessageResponse)
  // optional int32 role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role(), target);
  }

  // optional int32 id_hotel = 2;
  if (has_id_hotel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_hotel(), target);
  }

  // optional bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // optional string messageText = 4;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messagetext(), target);
  }

  // optional int32 id_user = 5;
  if (has_id_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.AuthMessageResponse)
  return target;
}

int AuthMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional int32 id_hotel = 2;
    if (has_id_hotel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_hotel());
    }

    // optional bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string messageText = 4;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

    // optional int32 id_user = 5;
    if (has_id_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthMessageResponse::MergeFrom(const AuthMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_id_hotel()) {
      set_id_hotel(from.id_hotel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_messagetext()) {
      set_messagetext(from.messagetext());
    }
    if (from.has_id_user()) {
      set_id_user(from.id_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessageResponse::CopyFrom(const AuthMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessageResponse::IsInitialized() const {

  return true;
}

void AuthMessageResponse::Swap(AuthMessageResponse* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(id_hotel_, other->id_hotel_);
    std::swap(status_, other->status_);
    std::swap(messagetext_, other->messagetext_);
    std::swap(id_user_, other->id_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthMessageResponse_descriptor_;
  metadata.reflection = AuthMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionInfo::kLoginFieldNumber;
const int SessionInfo::kUserIdFieldNumber;
const int SessionInfo::kRoleFieldNumber;
const int SessionInfo::kSessionIdFieldNumber;
#endif  // !_MSC_VER

SessionInfo::SessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(0);
  role_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:network.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionInfo_descriptor_;
}

const SessionInfo& SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New() const {
  return new SessionInfo;
}

void SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
    role_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int64 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional int32 role = 3;
      case 3: {
        if (tag == 24) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_session_id;
        break;
      }

      // optional string session_id = 4;
      case 4: {
        if (tag == 34) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.SessionInfo)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional int64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // optional int32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role(), output);
  }

  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.SessionInfo)
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional int64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // optional int32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role(), target);
  }

  // optional string session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.SessionInfo)
  return target;
}

int SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional int64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional int32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional string session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(userid_, other->userid_);
    std::swap(role_, other->role_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionInfo_descriptor_;
  metadata.reflection = SessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomTypesMessageResponse::kTypesFieldNumber;
#endif  // !_MSC_VER

RoomTypesMessageResponse::RoomTypesMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.RoomTypesMessageResponse)
}

void RoomTypesMessageResponse::InitAsDefaultInstance() {
}

RoomTypesMessageResponse::RoomTypesMessageResponse(const RoomTypesMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.RoomTypesMessageResponse)
}

void RoomTypesMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomTypesMessageResponse::~RoomTypesMessageResponse() {
  // @@protoc_insertion_point(destructor:network.RoomTypesMessageResponse)
  SharedDtor();
}

void RoomTypesMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomTypesMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomTypesMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomTypesMessageResponse_descriptor_;
}

const RoomTypesMessageResponse& RoomTypesMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RoomTypesMessageResponse* RoomTypesMessageResponse::default_instance_ = NULL;

RoomTypesMessageResponse* RoomTypesMessageResponse::New() const {
  return new RoomTypesMessageResponse;
}

void RoomTypesMessageResponse::Clear() {
  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomTypesMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.RoomTypesMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string types = 1;
      case 1: {
        if (tag == 10) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_types()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->types(this->types_size() - 1).data(),
            this->types(this->types_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_types;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.RoomTypesMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.RoomTypesMessageResponse)
  return false;
#undef DO_
}

void RoomTypesMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.RoomTypesMessageResponse)
  // repeated string types = 1;
  for (int i = 0; i < this->types_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->types(i).data(), this->types(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.RoomTypesMessageResponse)
}

::google::protobuf::uint8* RoomTypesMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.RoomTypesMessageResponse)
  // repeated string types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->types(i).data(), this->types(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.RoomTypesMessageResponse)
  return target;
}

int RoomTypesMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated string types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->types(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomTypesMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomTypesMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomTypesMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomTypesMessageResponse::MergeFrom(const RoomTypesMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomTypesMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomTypesMessageResponse::CopyFrom(const RoomTypesMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomTypesMessageResponse::IsInitialized() const {

  return true;
}

void RoomTypesMessageResponse::Swap(RoomTypesMessageResponse* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomTypesMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomTypesMessageResponse_descriptor_;
  metadata.reflection = RoomTypesMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotelType::kIdFieldNumber;
const int HotelType::kNameFieldNumber;
#endif  // !_MSC_VER

HotelType::HotelType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HotelType)
}

void HotelType::InitAsDefaultInstance() {
}

HotelType::HotelType(const HotelType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HotelType)
}

void HotelType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelType::~HotelType() {
  // @@protoc_insertion_point(destructor:network.HotelType)
  SharedDtor();
}

void HotelType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HotelType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotelType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelType_descriptor_;
}

const HotelType& HotelType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HotelType* HotelType::default_instance_ = NULL;

HotelType* HotelType::New() const {
  return new HotelType;
}

void HotelType::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotelType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HotelType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HotelType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HotelType)
  return false;
#undef DO_
}

void HotelType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HotelType)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HotelType)
}

::google::protobuf::uint8* HotelType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HotelType)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HotelType)
  return target;
}

int HotelType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotelType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotelType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotelType::MergeFrom(const HotelType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotelType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotelType::CopyFrom(const HotelType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelType::IsInitialized() const {

  return true;
}

void HotelType::Swap(HotelType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotelType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotelType_descriptor_;
  metadata.reflection = HotelType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotelTypesMessageResponse::kTypesFieldNumber;
#endif  // !_MSC_VER

HotelTypesMessageResponse::HotelTypesMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.HotelTypesMessageResponse)
}

void HotelTypesMessageResponse::InitAsDefaultInstance() {
}

HotelTypesMessageResponse::HotelTypesMessageResponse(const HotelTypesMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.HotelTypesMessageResponse)
}

void HotelTypesMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelTypesMessageResponse::~HotelTypesMessageResponse() {
  // @@protoc_insertion_point(destructor:network.HotelTypesMessageResponse)
  SharedDtor();
}

void HotelTypesMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotelTypesMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotelTypesMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotelTypesMessageResponse_descriptor_;
}

const HotelTypesMessageResponse& HotelTypesMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HotelTypesMessageResponse* HotelTypesMessageResponse::default_instance_ = NULL;

HotelTypesMessageResponse* HotelTypesMessageResponse::New() const {
  return new HotelTypesMessageResponse;
}

void HotelTypesMessageResponse::Clear() {
  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotelTypesMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.HotelTypesMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.HotelType types = 1;
      case 1: {
        if (tag == 10) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_types;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.HotelTypesMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.HotelTypesMessageResponse)
  return false;
#undef DO_
}

void HotelTypesMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.HotelTypesMessageResponse)
  // repeated .network.HotelType types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.HotelTypesMessageResponse)
}

::google::protobuf::uint8* HotelTypesMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.HotelTypesMessageResponse)
  // repeated .network.HotelType types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.HotelTypesMessageResponse)
  return target;
}

int HotelTypesMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .network.HotelType types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelTypesMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotelTypesMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotelTypesMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotelTypesMessageResponse::MergeFrom(const HotelTypesMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotelTypesMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotelTypesMessageResponse::CopyFrom(const HotelTypesMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelTypesMessageResponse::IsInitialized() const {

  return true;
}

void HotelTypesMessageResponse::Swap(HotelTypesMessageResponse* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotelTypesMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotelTypesMessageResponse_descriptor_;
  metadata.reflection = HotelTypesMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseContext::kErrorCodeFieldNumber;
const int ResponseContext::kMessageTypeFieldNumber;
const int ResponseContext::kRegisterResponseFieldNumber;
const int ResponseContext::kAuthResponseFieldNumber;
const int ResponseContext::kSessionInfoFieldNumber;
const int ResponseContext::kGuestsFieldNumber;
const int ResponseContext::kEmployeesFieldNumber;
const int ResponseContext::kHotelsFieldNumber;
const int ResponseContext::kRoomsFieldNumber;
const int ResponseContext::kTypesFieldNumber;
const int ResponseContext::kOrdersFieldNumber;
const int ResponseContext::kHotelTypesFieldNumber;
#endif  // !_MSC_VER

ResponseContext::ResponseContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.ResponseContext)
}

void ResponseContext::InitAsDefaultInstance() {
  register_response_ = const_cast< ::network::RegisterMessageResponse*>(&::network::RegisterMessageResponse::default_instance());
  auth_response_ = const_cast< ::network::AuthMessageResponse*>(&::network::AuthMessageResponse::default_instance());
  session_info_ = const_cast< ::network::SessionInfo*>(&::network::SessionInfo::default_instance());
  guests_ = const_cast< ::network::GuestsMessageResponse*>(&::network::GuestsMessageResponse::default_instance());
  employees_ = const_cast< ::network::EmployeesMessageResponse*>(&::network::EmployeesMessageResponse::default_instance());
  hotels_ = const_cast< ::network::HotelsMessageResponse*>(&::network::HotelsMessageResponse::default_instance());
  rooms_ = const_cast< ::network::RoomsMessageResponse*>(&::network::RoomsMessageResponse::default_instance());
  types_ = const_cast< ::network::RoomTypesMessageResponse*>(&::network::RoomTypesMessageResponse::default_instance());
  orders_ = const_cast< ::network::OrdersMessageResponse*>(&::network::OrdersMessageResponse::default_instance());
  hotel_types_ = const_cast< ::network::HotelTypesMessageResponse*>(&::network::HotelTypesMessageResponse::default_instance());
}

ResponseContext::ResponseContext(const ResponseContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.ResponseContext)
}

void ResponseContext::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  message_type__ = 0;
  register_response_ = NULL;
  auth_response_ = NULL;
  session_info_ = NULL;
  guests_ = NULL;
  employees_ = NULL;
  hotels_ = NULL;
  rooms_ = NULL;
  types_ = NULL;
  orders_ = NULL;
  hotel_types_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseContext::~ResponseContext() {
  // @@protoc_insertion_point(destructor:network.ResponseContext)
  SharedDtor();
}

void ResponseContext::SharedDtor() {
  if (this != default_instance_) {
    delete register_response_;
    delete auth_response_;
    delete session_info_;
    delete guests_;
    delete employees_;
    delete hotels_;
    delete rooms_;
    delete types_;
    delete orders_;
    delete hotel_types_;
  }
}

void ResponseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseContext_descriptor_;
}

const ResponseContext& ResponseContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

ResponseContext* ResponseContext::default_instance_ = NULL;

ResponseContext* ResponseContext::New() const {
  return new ResponseContext;
}

void ResponseContext::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseContext*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(error_code_, message_type__);
    if (has_register_response()) {
      if (register_response_ != NULL) register_response_->::network::RegisterMessageResponse::Clear();
    }
    if (has_auth_response()) {
      if (auth_response_ != NULL) auth_response_->::network::AuthMessageResponse::Clear();
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
    }
    if (has_guests()) {
      if (guests_ != NULL) guests_->::network::GuestsMessageResponse::Clear();
    }
    if (has_employees()) {
      if (employees_ != NULL) employees_->::network::EmployeesMessageResponse::Clear();
    }
    if (has_hotels()) {
      if (hotels_ != NULL) hotels_->::network::HotelsMessageResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_rooms()) {
      if (rooms_ != NULL) rooms_->::network::RoomsMessageResponse::Clear();
    }
    if (has_types()) {
      if (types_ != NULL) types_->::network::RoomTypesMessageResponse::Clear();
    }
    if (has_orders()) {
      if (orders_ != NULL) orders_->::network::OrdersMessageResponse::Clear();
    }
    if (has_hotel_types()) {
      if (hotel_types_ != NULL) hotel_types_->::network::HotelTypesMessageResponse::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.ResponseContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_type_;
        break;
      }

      // optional .network.message_type message_type_ = 2;
      case 2: {
        if (tag == 16) {
         parse_message_type_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network::message_type_IsValid(value)) {
            set_message_type_(static_cast< ::network::message_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_register_response;
        break;
      }

      // optional .network.RegisterMessageResponse register_response = 3;
      case 3: {
        if (tag == 26) {
         parse_register_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auth_response;
        break;
      }

      // optional .network.AuthMessageResponse auth_response = 4;
      case 4: {
        if (tag == 34) {
         parse_auth_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session_info;
        break;
      }

      // optional .network.SessionInfo session_info = 5;
      case 5: {
        if (tag == 42) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guests;
        break;
      }

      // optional .network.GuestsMessageResponse guests = 6;
      case 6: {
        if (tag == 50) {
         parse_guests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_employees;
        break;
      }

      // optional .network.EmployeesMessageResponse employees = 7;
      case 7: {
        if (tag == 58) {
         parse_employees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_employees()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hotels;
        break;
      }

      // optional .network.HotelsMessageResponse hotels = 8;
      case 8: {
        if (tag == 66) {
         parse_hotels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rooms;
        break;
      }

      // optional .network.RoomsMessageResponse rooms = 9;
      case 9: {
        if (tag == 74) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_types;
        break;
      }

      // optional .network.RoomTypesMessageResponse types = 10;
      case 10: {
        if (tag == 82) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_orders;
        break;
      }

      // optional .network.OrdersMessageResponse orders = 11;
      case 11: {
        if (tag == 90) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_hotel_types;
        break;
      }

      // optional .network.HotelTypesMessageResponse hotel_types = 12;
      case 12: {
        if (tag == 98) {
         parse_hotel_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotel_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.ResponseContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.ResponseContext)
  return false;
#undef DO_
}

void ResponseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.ResponseContext)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .network.message_type message_type_ = 2;
  if (has_message_type_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->message_type_(), output);
  }

  // optional .network.RegisterMessageResponse register_response = 3;
  if (has_register_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->register_response(), output);
  }

  // optional .network.AuthMessageResponse auth_response = 4;
  if (has_auth_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auth_response(), output);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_info(), output);
  }

  // optional .network.GuestsMessageResponse guests = 6;
  if (has_guests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->guests(), output);
  }

  // optional .network.EmployeesMessageResponse employees = 7;
  if (has_employees()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->employees(), output);
  }

  // optional .network.HotelsMessageResponse hotels = 8;
  if (has_hotels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hotels(), output);
  }

  // optional .network.RoomsMessageResponse rooms = 9;
  if (has_rooms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rooms(), output);
  }

  // optional .network.RoomTypesMessageResponse types = 10;
  if (has_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->types(), output);
  }

  // optional .network.OrdersMessageResponse orders = 11;
  if (has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->orders(), output);
  }

  // optional .network.HotelTypesMessageResponse hotel_types = 12;
  if (has_hotel_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->hotel_types(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network.ResponseContext)
}

::google::protobuf::uint8* ResponseContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.ResponseContext)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .network.message_type message_type_ = 2;
  if (has_message_type_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->message_type_(), target);
  }

  // optional .network.RegisterMessageResponse register_response = 3;
  if (has_register_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->register_response(), target);
  }

  // optional .network.AuthMessageResponse auth_response = 4;
  if (has_auth_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->auth_response(), target);
  }

  // optional .network.SessionInfo session_info = 5;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_info(), target);
  }

  // optional .network.GuestsMessageResponse guests = 6;
  if (has_guests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->guests(), target);
  }

  // optional .network.EmployeesMessageResponse employees = 7;
  if (has_employees()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->employees(), target);
  }

  // optional .network.HotelsMessageResponse hotels = 8;
  if (has_hotels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hotels(), target);
  }

  // optional .network.RoomsMessageResponse rooms = 9;
  if (has_rooms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rooms(), target);
  }

  // optional .network.RoomTypesMessageResponse types = 10;
  if (has_types()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->types(), target);
  }

  // optional .network.OrdersMessageResponse orders = 11;
  if (has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->orders(), target);
  }

  // optional .network.HotelTypesMessageResponse hotel_types = 12;
  if (has_hotel_types()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->hotel_types(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.ResponseContext)
  return target;
}

int ResponseContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .network.message_type message_type_ = 2;
    if (has_message_type_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type_());
    }

    // optional .network.RegisterMessageResponse register_response = 3;
    if (has_register_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_response());
    }

    // optional .network.AuthMessageResponse auth_response = 4;
    if (has_auth_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_response());
    }

    // optional .network.SessionInfo session_info = 5;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

    // optional .network.GuestsMessageResponse guests = 6;
    if (has_guests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guests());
    }

    // optional .network.EmployeesMessageResponse employees = 7;
    if (has_employees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->employees());
    }

    // optional .network.HotelsMessageResponse hotels = 8;
    if (has_hotels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotels());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .network.RoomsMessageResponse rooms = 9;
    if (has_rooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooms());
    }

    // optional .network.RoomTypesMessageResponse types = 10;
    if (has_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->types());
    }

    // optional .network.OrdersMessageResponse orders = 11;
    if (has_orders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orders());
    }

    // optional .network.HotelTypesMessageResponse hotel_types = 12;
    if (has_hotel_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotel_types());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseContext::MergeFrom(const ResponseContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_message_type_()) {
      set_message_type_(from.message_type_());
    }
    if (from.has_register_response()) {
      mutable_register_response()->::network::RegisterMessageResponse::MergeFrom(from.register_response());
    }
    if (from.has_auth_response()) {
      mutable_auth_response()->::network::AuthMessageResponse::MergeFrom(from.auth_response());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::network::SessionInfo::MergeFrom(from.session_info());
    }
    if (from.has_guests()) {
      mutable_guests()->::network::GuestsMessageResponse::MergeFrom(from.guests());
    }
    if (from.has_employees()) {
      mutable_employees()->::network::EmployeesMessageResponse::MergeFrom(from.employees());
    }
    if (from.has_hotels()) {
      mutable_hotels()->::network::HotelsMessageResponse::MergeFrom(from.hotels());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rooms()) {
      mutable_rooms()->::network::RoomsMessageResponse::MergeFrom(from.rooms());
    }
    if (from.has_types()) {
      mutable_types()->::network::RoomTypesMessageResponse::MergeFrom(from.types());
    }
    if (from.has_orders()) {
      mutable_orders()->::network::OrdersMessageResponse::MergeFrom(from.orders());
    }
    if (from.has_hotel_types()) {
      mutable_hotel_types()->::network::HotelTypesMessageResponse::MergeFrom(from.hotel_types());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseContext::CopyFrom(const ResponseContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseContext::IsInitialized() const {

  return true;
}

void ResponseContext::Swap(ResponseContext* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(message_type__, other->message_type__);
    std::swap(register_response_, other->register_response_);
    std::swap(auth_response_, other->auth_response_);
    std::swap(session_info_, other->session_info_);
    std::swap(guests_, other->guests_);
    std::swap(employees_, other->employees_);
    std::swap(hotels_, other->hotels_);
    std::swap(rooms_, other->rooms_);
    std::swap(types_, other->types_);
    std::swap(orders_, other->orders_);
    std::swap(hotel_types_, other->hotel_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseContext_descriptor_;
  metadata.reflection = ResponseContext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)
