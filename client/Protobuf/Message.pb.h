// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
// @@protoc_insertion_point(includes)

namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class AuthMessage;
class RegisterMessage;
class RequestContext;
class RegisterMessageResponse;
class AuthMessageResponse;
class SessionInfo;
class ResponseContext;

// ===================================================================

class AuthMessage : public ::google::protobuf::Message {
 public:
  AuthMessage();
  virtual ~AuthMessage();

  AuthMessage(const AuthMessage& from);

  inline AuthMessage& operator=(const AuthMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthMessage& default_instance();

  void Swap(AuthMessage* other);

  // implements Message ----------------------------------------------

  AuthMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthMessage& from);
  void MergeFrom(const AuthMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // optional string pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline const ::std::string& pass() const;
  inline void set_pass(const ::std::string& value);
  inline void set_pass(const char* value);
  inline void set_pass(const char* value, size_t size);
  inline ::std::string* mutable_pass();
  inline ::std::string* release_pass();
  inline void set_allocated_pass(::std::string* pass);

  // @@protoc_insertion_point(class_scope:network.AuthMessage)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_;
  ::std::string* pass_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static AuthMessage* default_instance_;
};
// -------------------------------------------------------------------

class RegisterMessage : public ::google::protobuf::Message {
 public:
  RegisterMessage();
  virtual ~RegisterMessage();

  RegisterMessage(const RegisterMessage& from);

  inline RegisterMessage& operator=(const RegisterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterMessage& default_instance();

  void Swap(RegisterMessage* other);

  // implements Message ----------------------------------------------

  RegisterMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterMessage& from);
  void MergeFrom(const RegisterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // optional string pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline const ::std::string& pass() const;
  inline void set_pass(const ::std::string& value);
  inline void set_pass(const char* value);
  inline void set_pass(const char* value, size_t size);
  inline ::std::string* mutable_pass();
  inline ::std::string* release_pass();
  inline void set_allocated_pass(::std::string* pass);

  // optional string firstname = 3;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstnameFieldNumber = 3;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string secondname = 4;
  inline bool has_secondname() const;
  inline void clear_secondname();
  static const int kSecondnameFieldNumber = 4;
  inline const ::std::string& secondname() const;
  inline void set_secondname(const ::std::string& value);
  inline void set_secondname(const char* value);
  inline void set_secondname(const char* value, size_t size);
  inline ::std::string* mutable_secondname();
  inline ::std::string* release_secondname();
  inline void set_allocated_secondname(::std::string* secondname);

  // optional string lastname = 5;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 5;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // optional string phonenumber = 6;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 6;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string passport = 7;
  inline bool has_passport() const;
  inline void clear_passport();
  static const int kPassportFieldNumber = 7;
  inline const ::std::string& passport() const;
  inline void set_passport(const ::std::string& value);
  inline void set_passport(const char* value);
  inline void set_passport(const char* value, size_t size);
  inline ::std::string* mutable_passport();
  inline ::std::string* release_passport();
  inline void set_allocated_passport(::std::string* passport);

  // @@protoc_insertion_point(class_scope:network.RegisterMessage)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_secondname();
  inline void clear_has_secondname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_passport();
  inline void clear_has_passport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_;
  ::std::string* pass_;
  ::std::string* firstname_;
  ::std::string* secondname_;
  ::std::string* lastname_;
  ::std::string* phonenumber_;
  ::std::string* passport_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static RegisterMessage* default_instance_;
};
// -------------------------------------------------------------------

class RequestContext : public ::google::protobuf::Message {
 public:
  RequestContext();
  virtual ~RequestContext();

  RequestContext(const RequestContext& from);

  inline RequestContext& operator=(const RequestContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestContext& default_instance();

  void Swap(RequestContext* other);

  // implements Message ----------------------------------------------

  RequestContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestContext& from);
  void MergeFrom(const RequestContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .network.message_type message_type_ = 1;
  inline bool has_message_type_() const;
  inline void clear_message_type_();
  static const int kMessageTypeFieldNumber = 1;
  inline ::network::message_type message_type_() const;
  inline void set_message_type_(::network::message_type value);

  // optional .network.AuthMessage auth_message_ = 3;
  inline bool has_auth_message_() const;
  inline void clear_auth_message_();
  static const int kAuthMessageFieldNumber = 3;
  inline const ::network::AuthMessage& auth_message_() const;
  inline ::network::AuthMessage* mutable_auth_message_();
  inline ::network::AuthMessage* release_auth_message_();
  inline void set_allocated_auth_message_(::network::AuthMessage* auth_message_);

  // optional .network.RegisterMessage register_message_ = 4;
  inline bool has_register_message_() const;
  inline void clear_register_message_();
  static const int kRegisterMessageFieldNumber = 4;
  inline const ::network::RegisterMessage& register_message_() const;
  inline ::network::RegisterMessage* mutable_register_message_();
  inline ::network::RegisterMessage* release_register_message_();
  inline void set_allocated_register_message_(::network::RegisterMessage* register_message_);

  // optional .network.SessionInfo session_info = 5;
  inline bool has_session_info() const;
  inline void clear_session_info();
  static const int kSessionInfoFieldNumber = 5;
  inline const ::network::SessionInfo& session_info() const;
  inline ::network::SessionInfo* mutable_session_info();
  inline ::network::SessionInfo* release_session_info();
  inline void set_allocated_session_info(::network::SessionInfo* session_info);

  // @@protoc_insertion_point(class_scope:network.RequestContext)
 private:
  inline void set_has_message_type_();
  inline void clear_has_message_type_();
  inline void set_has_auth_message_();
  inline void clear_has_auth_message_();
  inline void set_has_register_message_();
  inline void clear_has_register_message_();
  inline void set_has_session_info();
  inline void clear_has_session_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::network::AuthMessage* auth_message__;
  ::network::RegisterMessage* register_message__;
  ::network::SessionInfo* session_info_;
  int message_type__;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static RequestContext* default_instance_;
};
// -------------------------------------------------------------------

class RegisterMessageResponse : public ::google::protobuf::Message {
 public:
  RegisterMessageResponse();
  virtual ~RegisterMessageResponse();

  RegisterMessageResponse(const RegisterMessageResponse& from);

  inline RegisterMessageResponse& operator=(const RegisterMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterMessageResponse& default_instance();

  void Swap(RegisterMessageResponse* other);

  // implements Message ----------------------------------------------

  RegisterMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterMessageResponse& from);
  void MergeFrom(const RegisterMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string messageText = 1;
  inline bool has_messagetext() const;
  inline void clear_messagetext();
  static const int kMessageTextFieldNumber = 1;
  inline const ::std::string& messagetext() const;
  inline void set_messagetext(const ::std::string& value);
  inline void set_messagetext(const char* value);
  inline void set_messagetext(const char* value, size_t size);
  inline ::std::string* mutable_messagetext();
  inline ::std::string* release_messagetext();
  inline void set_allocated_messagetext(::std::string* messagetext);

  // optional bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:network.RegisterMessageResponse)
 private:
  inline void set_has_messagetext();
  inline void clear_has_messagetext();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* messagetext_;
  bool status_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static RegisterMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class AuthMessageResponse : public ::google::protobuf::Message {
 public:
  AuthMessageResponse();
  virtual ~AuthMessageResponse();

  AuthMessageResponse(const AuthMessageResponse& from);

  inline AuthMessageResponse& operator=(const AuthMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthMessageResponse& default_instance();

  void Swap(AuthMessageResponse* other);

  // implements Message ----------------------------------------------

  AuthMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthMessageResponse& from);
  void MergeFrom(const AuthMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 role = 1;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline ::google::protobuf::int32 role() const;
  inline void set_role(::google::protobuf::int32 value);

  // optional int32 id_hotel = 2;
  inline bool has_id_hotel() const;
  inline void clear_id_hotel();
  static const int kIdHotelFieldNumber = 2;
  inline ::google::protobuf::int32 id_hotel() const;
  inline void set_id_hotel(::google::protobuf::int32 value);

  // optional bool status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline bool status() const;
  inline void set_status(bool value);

  // optional string messageText = 4;
  inline bool has_messagetext() const;
  inline void clear_messagetext();
  static const int kMessageTextFieldNumber = 4;
  inline const ::std::string& messagetext() const;
  inline void set_messagetext(const ::std::string& value);
  inline void set_messagetext(const char* value);
  inline void set_messagetext(const char* value, size_t size);
  inline ::std::string* mutable_messagetext();
  inline ::std::string* release_messagetext();
  inline void set_allocated_messagetext(::std::string* messagetext);

  // @@protoc_insertion_point(class_scope:network.AuthMessageResponse)
 private:
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_id_hotel();
  inline void clear_has_id_hotel();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_messagetext();
  inline void clear_has_messagetext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 role_;
  ::google::protobuf::int32 id_hotel_;
  ::std::string* messagetext_;
  bool status_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static AuthMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class SessionInfo : public ::google::protobuf::Message {
 public:
  SessionInfo();
  virtual ~SessionInfo();

  SessionInfo(const SessionInfo& from);

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionInfo& default_instance();

  void Swap(SessionInfo* other);

  // implements Message ----------------------------------------------

  SessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionInfo& from);
  void MergeFrom(const SessionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);

  // optional string session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:network.SessionInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 user_id_;
  ::std::string* session_id_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static SessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResponseContext : public ::google::protobuf::Message {
 public:
  ResponseContext();
  virtual ~ResponseContext();

  ResponseContext(const ResponseContext& from);

  inline ResponseContext& operator=(const ResponseContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseContext& default_instance();

  void Swap(ResponseContext* other);

  // implements Message ----------------------------------------------

  ResponseContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseContext& from);
  void MergeFrom(const ResponseContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .network.message_type message_type_ = 2;
  inline bool has_message_type_() const;
  inline void clear_message_type_();
  static const int kMessageTypeFieldNumber = 2;
  inline ::network::message_type message_type_() const;
  inline void set_message_type_(::network::message_type value);

  // optional .network.RegisterMessageResponse register_response = 3;
  inline bool has_register_response() const;
  inline void clear_register_response();
  static const int kRegisterResponseFieldNumber = 3;
  inline const ::network::RegisterMessageResponse& register_response() const;
  inline ::network::RegisterMessageResponse* mutable_register_response();
  inline ::network::RegisterMessageResponse* release_register_response();
  inline void set_allocated_register_response(::network::RegisterMessageResponse* register_response);

  // optional .network.AuthMessageResponse auth_response = 4;
  inline bool has_auth_response() const;
  inline void clear_auth_response();
  static const int kAuthResponseFieldNumber = 4;
  inline const ::network::AuthMessageResponse& auth_response() const;
  inline ::network::AuthMessageResponse* mutable_auth_response();
  inline ::network::AuthMessageResponse* release_auth_response();
  inline void set_allocated_auth_response(::network::AuthMessageResponse* auth_response);

  // optional .network.SessionInfo session_info = 5;
  inline bool has_session_info() const;
  inline void clear_session_info();
  static const int kSessionInfoFieldNumber = 5;
  inline const ::network::SessionInfo& session_info() const;
  inline ::network::SessionInfo* mutable_session_info();
  inline ::network::SessionInfo* release_session_info();
  inline void set_allocated_session_info(::network::SessionInfo* session_info);

  // @@protoc_insertion_point(class_scope:network.ResponseContext)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_message_type_();
  inline void clear_has_message_type_();
  inline void set_has_register_response();
  inline void clear_has_register_response();
  inline void set_has_auth_response();
  inline void clear_has_auth_response();
  inline void set_has_session_info();
  inline void clear_has_session_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  int message_type__;
  ::network::RegisterMessageResponse* register_response_;
  ::network::AuthMessageResponse* auth_response_;
  ::network::SessionInfo* session_info_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static ResponseContext* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthMessage

// optional string login = 1;
inline bool AuthMessage::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthMessage::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthMessage::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthMessage::clear_login() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& AuthMessage::login() const {
  // @@protoc_insertion_point(field_get:network.AuthMessage.login)
  return *login_;
}
inline void AuthMessage::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set:network.AuthMessage.login)
}
inline void AuthMessage::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.AuthMessage.login)
}
inline void AuthMessage::set_login(const char* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.AuthMessage.login)
}
inline ::std::string* AuthMessage::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.AuthMessage.login)
  return login_;
}
inline ::std::string* AuthMessage::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthMessage::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.AuthMessage.login)
}

// optional string pass = 2;
inline bool AuthMessage::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthMessage::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthMessage::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthMessage::clear_pass() {
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_->clear();
  }
  clear_has_pass();
}
inline const ::std::string& AuthMessage::pass() const {
  // @@protoc_insertion_point(field_get:network.AuthMessage.pass)
  return *pass_;
}
inline void AuthMessage::set_pass(const ::std::string& value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
  // @@protoc_insertion_point(field_set:network.AuthMessage.pass)
}
inline void AuthMessage::set_pass(const char* value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.AuthMessage.pass)
}
inline void AuthMessage::set_pass(const char* value, size_t size) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.AuthMessage.pass)
}
inline ::std::string* AuthMessage::mutable_pass() {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.AuthMessage.pass)
  return pass_;
}
inline ::std::string* AuthMessage::release_pass() {
  clear_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_;
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthMessage::set_allocated_pass(::std::string* pass) {
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (pass) {
    set_has_pass();
    pass_ = pass;
  } else {
    clear_has_pass();
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.AuthMessage.pass)
}

// -------------------------------------------------------------------

// RegisterMessage

// optional string login = 1;
inline bool RegisterMessage::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterMessage::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterMessage::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterMessage::clear_login() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& RegisterMessage::login() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.login)
  return *login_;
}
inline void RegisterMessage::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.login)
}
inline void RegisterMessage::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.login)
}
inline void RegisterMessage::set_login(const char* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.login)
}
inline ::std::string* RegisterMessage::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.login)
  return login_;
}
inline ::std::string* RegisterMessage::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.login)
}

// optional string pass = 2;
inline bool RegisterMessage::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterMessage::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterMessage::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterMessage::clear_pass() {
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_->clear();
  }
  clear_has_pass();
}
inline const ::std::string& RegisterMessage::pass() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.pass)
  return *pass_;
}
inline void RegisterMessage::set_pass(const ::std::string& value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.pass)
}
inline void RegisterMessage::set_pass(const char* value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.pass)
}
inline void RegisterMessage::set_pass(const char* value, size_t size) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  pass_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.pass)
}
inline ::std::string* RegisterMessage::mutable_pass() {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.pass)
  return pass_;
}
inline ::std::string* RegisterMessage::release_pass() {
  clear_has_pass();
  if (pass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_;
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_pass(::std::string* pass) {
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (pass) {
    set_has_pass();
    pass_ = pass;
  } else {
    clear_has_pass();
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.pass)
}

// optional string firstname = 3;
inline bool RegisterMessage::has_firstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterMessage::set_has_firstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterMessage::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterMessage::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& RegisterMessage::firstname() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.firstname)
  return *firstname_;
}
inline void RegisterMessage::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.firstname)
}
inline void RegisterMessage::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.firstname)
}
inline void RegisterMessage::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.firstname)
}
inline ::std::string* RegisterMessage::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.firstname)
  return firstname_;
}
inline ::std::string* RegisterMessage::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.firstname)
}

// optional string secondname = 4;
inline bool RegisterMessage::has_secondname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterMessage::set_has_secondname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterMessage::clear_has_secondname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterMessage::clear_secondname() {
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondname_->clear();
  }
  clear_has_secondname();
}
inline const ::std::string& RegisterMessage::secondname() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.secondname)
  return *secondname_;
}
inline void RegisterMessage::set_secondname(const ::std::string& value) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.secondname)
}
inline void RegisterMessage::set_secondname(const char* value) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.secondname)
}
inline void RegisterMessage::set_secondname(const char* value, size_t size) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.secondname)
}
inline ::std::string* RegisterMessage::mutable_secondname() {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.secondname)
  return secondname_;
}
inline ::std::string* RegisterMessage::release_secondname() {
  clear_has_secondname();
  if (secondname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = secondname_;
    secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_secondname(::std::string* secondname) {
  if (secondname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondname_;
  }
  if (secondname) {
    set_has_secondname();
    secondname_ = secondname;
  } else {
    clear_has_secondname();
    secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.secondname)
}

// optional string lastname = 5;
inline bool RegisterMessage::has_lastname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterMessage::set_has_lastname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterMessage::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterMessage::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& RegisterMessage::lastname() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.lastname)
  return *lastname_;
}
inline void RegisterMessage::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.lastname)
}
inline void RegisterMessage::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.lastname)
}
inline void RegisterMessage::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.lastname)
}
inline ::std::string* RegisterMessage::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.lastname)
  return lastname_;
}
inline ::std::string* RegisterMessage::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.lastname)
}

// optional string phonenumber = 6;
inline bool RegisterMessage::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterMessage::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterMessage::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterMessage::clear_phonenumber() {
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_->clear();
  }
  clear_has_phonenumber();
}
inline const ::std::string& RegisterMessage::phonenumber() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.phonenumber)
  return *phonenumber_;
}
inline void RegisterMessage::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.phonenumber)
}
inline void RegisterMessage::set_phonenumber(const char* value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.phonenumber)
}
inline void RegisterMessage::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.phonenumber)
}
inline ::std::string* RegisterMessage::mutable_phonenumber() {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.phonenumber)
  return phonenumber_;
}
inline ::std::string* RegisterMessage::release_phonenumber() {
  clear_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phonenumber_;
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (phonenumber) {
    set_has_phonenumber();
    phonenumber_ = phonenumber;
  } else {
    clear_has_phonenumber();
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.phonenumber)
}

// optional string passport = 7;
inline bool RegisterMessage::has_passport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterMessage::set_has_passport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterMessage::clear_has_passport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterMessage::clear_passport() {
  if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passport_->clear();
  }
  clear_has_passport();
}
inline const ::std::string& RegisterMessage::passport() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessage.passport)
  return *passport_;
}
inline void RegisterMessage::set_passport(const ::std::string& value) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passport_ = new ::std::string;
  }
  passport_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessage.passport)
}
inline void RegisterMessage::set_passport(const char* value) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passport_ = new ::std::string;
  }
  passport_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessage.passport)
}
inline void RegisterMessage::set_passport(const char* value, size_t size) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passport_ = new ::std::string;
  }
  passport_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessage.passport)
}
inline ::std::string* RegisterMessage::mutable_passport() {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passport_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessage.passport)
  return passport_;
}
inline ::std::string* RegisterMessage::release_passport() {
  clear_has_passport();
  if (passport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passport_;
    passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessage::set_allocated_passport(::std::string* passport) {
  if (passport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passport_;
  }
  if (passport) {
    set_has_passport();
    passport_ = passport;
  } else {
    clear_has_passport();
    passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessage.passport)
}

// -------------------------------------------------------------------

// RequestContext

// optional .network.message_type message_type_ = 1;
inline bool RequestContext::has_message_type_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestContext::set_has_message_type_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestContext::clear_has_message_type_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestContext::clear_message_type_() {
  message_type__ = 0;
  clear_has_message_type_();
}
inline ::network::message_type RequestContext::message_type_() const {
  // @@protoc_insertion_point(field_get:network.RequestContext.message_type_)
  return static_cast< ::network::message_type >(message_type__);
}
inline void RequestContext::set_message_type_(::network::message_type value) {
  assert(::network::message_type_IsValid(value));
  set_has_message_type_();
  message_type__ = value;
  // @@protoc_insertion_point(field_set:network.RequestContext.message_type_)
}

// optional .network.AuthMessage auth_message_ = 3;
inline bool RequestContext::has_auth_message_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestContext::set_has_auth_message_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestContext::clear_has_auth_message_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestContext::clear_auth_message_() {
  if (auth_message__ != NULL) auth_message__->::network::AuthMessage::Clear();
  clear_has_auth_message_();
}
inline const ::network::AuthMessage& RequestContext::auth_message_() const {
  // @@protoc_insertion_point(field_get:network.RequestContext.auth_message_)
  return auth_message__ != NULL ? *auth_message__ : *default_instance_->auth_message__;
}
inline ::network::AuthMessage* RequestContext::mutable_auth_message_() {
  set_has_auth_message_();
  if (auth_message__ == NULL) auth_message__ = new ::network::AuthMessage;
  // @@protoc_insertion_point(field_mutable:network.RequestContext.auth_message_)
  return auth_message__;
}
inline ::network::AuthMessage* RequestContext::release_auth_message_() {
  clear_has_auth_message_();
  ::network::AuthMessage* temp = auth_message__;
  auth_message__ = NULL;
  return temp;
}
inline void RequestContext::set_allocated_auth_message_(::network::AuthMessage* auth_message_) {
  delete auth_message__;
  auth_message__ = auth_message_;
  if (auth_message_) {
    set_has_auth_message_();
  } else {
    clear_has_auth_message_();
  }
  // @@protoc_insertion_point(field_set_allocated:network.RequestContext.auth_message_)
}

// optional .network.RegisterMessage register_message_ = 4;
inline bool RequestContext::has_register_message_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestContext::set_has_register_message_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestContext::clear_has_register_message_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestContext::clear_register_message_() {
  if (register_message__ != NULL) register_message__->::network::RegisterMessage::Clear();
  clear_has_register_message_();
}
inline const ::network::RegisterMessage& RequestContext::register_message_() const {
  // @@protoc_insertion_point(field_get:network.RequestContext.register_message_)
  return register_message__ != NULL ? *register_message__ : *default_instance_->register_message__;
}
inline ::network::RegisterMessage* RequestContext::mutable_register_message_() {
  set_has_register_message_();
  if (register_message__ == NULL) register_message__ = new ::network::RegisterMessage;
  // @@protoc_insertion_point(field_mutable:network.RequestContext.register_message_)
  return register_message__;
}
inline ::network::RegisterMessage* RequestContext::release_register_message_() {
  clear_has_register_message_();
  ::network::RegisterMessage* temp = register_message__;
  register_message__ = NULL;
  return temp;
}
inline void RequestContext::set_allocated_register_message_(::network::RegisterMessage* register_message_) {
  delete register_message__;
  register_message__ = register_message_;
  if (register_message_) {
    set_has_register_message_();
  } else {
    clear_has_register_message_();
  }
  // @@protoc_insertion_point(field_set_allocated:network.RequestContext.register_message_)
}

// optional .network.SessionInfo session_info = 5;
inline bool RequestContext::has_session_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestContext::set_has_session_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestContext::clear_has_session_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestContext::clear_session_info() {
  if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
  clear_has_session_info();
}
inline const ::network::SessionInfo& RequestContext::session_info() const {
  // @@protoc_insertion_point(field_get:network.RequestContext.session_info)
  return session_info_ != NULL ? *session_info_ : *default_instance_->session_info_;
}
inline ::network::SessionInfo* RequestContext::mutable_session_info() {
  set_has_session_info();
  if (session_info_ == NULL) session_info_ = new ::network::SessionInfo;
  // @@protoc_insertion_point(field_mutable:network.RequestContext.session_info)
  return session_info_;
}
inline ::network::SessionInfo* RequestContext::release_session_info() {
  clear_has_session_info();
  ::network::SessionInfo* temp = session_info_;
  session_info_ = NULL;
  return temp;
}
inline void RequestContext::set_allocated_session_info(::network::SessionInfo* session_info) {
  delete session_info_;
  session_info_ = session_info;
  if (session_info) {
    set_has_session_info();
  } else {
    clear_has_session_info();
  }
  // @@protoc_insertion_point(field_set_allocated:network.RequestContext.session_info)
}

// -------------------------------------------------------------------

// RegisterMessageResponse

// optional string messageText = 1;
inline bool RegisterMessageResponse::has_messagetext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterMessageResponse::set_has_messagetext() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterMessageResponse::clear_has_messagetext() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterMessageResponse::clear_messagetext() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_->clear();
  }
  clear_has_messagetext();
}
inline const ::std::string& RegisterMessageResponse::messagetext() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessageResponse.messageText)
  return *messagetext_;
}
inline void RegisterMessageResponse::set_messagetext(const ::std::string& value) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(value);
  // @@protoc_insertion_point(field_set:network.RegisterMessageResponse.messageText)
}
inline void RegisterMessageResponse::set_messagetext(const char* value) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.RegisterMessageResponse.messageText)
}
inline void RegisterMessageResponse::set_messagetext(const char* value, size_t size) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.RegisterMessageResponse.messageText)
}
inline ::std::string* RegisterMessageResponse::mutable_messagetext() {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.RegisterMessageResponse.messageText)
  return messagetext_;
}
inline ::std::string* RegisterMessageResponse::release_messagetext() {
  clear_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagetext_;
    messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterMessageResponse::set_allocated_messagetext(::std::string* messagetext) {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (messagetext) {
    set_has_messagetext();
    messagetext_ = messagetext;
  } else {
    clear_has_messagetext();
    messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.RegisterMessageResponse.messageText)
}

// optional bool status = 2;
inline bool RegisterMessageResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterMessageResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterMessageResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterMessageResponse::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool RegisterMessageResponse::status() const {
  // @@protoc_insertion_point(field_get:network.RegisterMessageResponse.status)
  return status_;
}
inline void RegisterMessageResponse::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:network.RegisterMessageResponse.status)
}

// -------------------------------------------------------------------

// AuthMessageResponse

// optional int32 role = 1;
inline bool AuthMessageResponse::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthMessageResponse::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthMessageResponse::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthMessageResponse::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::google::protobuf::int32 AuthMessageResponse::role() const {
  // @@protoc_insertion_point(field_get:network.AuthMessageResponse.role)
  return role_;
}
inline void AuthMessageResponse::set_role(::google::protobuf::int32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:network.AuthMessageResponse.role)
}

// optional int32 id_hotel = 2;
inline bool AuthMessageResponse::has_id_hotel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthMessageResponse::set_has_id_hotel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthMessageResponse::clear_has_id_hotel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthMessageResponse::clear_id_hotel() {
  id_hotel_ = 0;
  clear_has_id_hotel();
}
inline ::google::protobuf::int32 AuthMessageResponse::id_hotel() const {
  // @@protoc_insertion_point(field_get:network.AuthMessageResponse.id_hotel)
  return id_hotel_;
}
inline void AuthMessageResponse::set_id_hotel(::google::protobuf::int32 value) {
  set_has_id_hotel();
  id_hotel_ = value;
  // @@protoc_insertion_point(field_set:network.AuthMessageResponse.id_hotel)
}

// optional bool status = 3;
inline bool AuthMessageResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthMessageResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthMessageResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthMessageResponse::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool AuthMessageResponse::status() const {
  // @@protoc_insertion_point(field_get:network.AuthMessageResponse.status)
  return status_;
}
inline void AuthMessageResponse::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:network.AuthMessageResponse.status)
}

// optional string messageText = 4;
inline bool AuthMessageResponse::has_messagetext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthMessageResponse::set_has_messagetext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthMessageResponse::clear_has_messagetext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthMessageResponse::clear_messagetext() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_->clear();
  }
  clear_has_messagetext();
}
inline const ::std::string& AuthMessageResponse::messagetext() const {
  // @@protoc_insertion_point(field_get:network.AuthMessageResponse.messageText)
  return *messagetext_;
}
inline void AuthMessageResponse::set_messagetext(const ::std::string& value) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(value);
  // @@protoc_insertion_point(field_set:network.AuthMessageResponse.messageText)
}
inline void AuthMessageResponse::set_messagetext(const char* value) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.AuthMessageResponse.messageText)
}
inline void AuthMessageResponse::set_messagetext(const char* value, size_t size) {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  messagetext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.AuthMessageResponse.messageText)
}
inline ::std::string* AuthMessageResponse::mutable_messagetext() {
  set_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.AuthMessageResponse.messageText)
  return messagetext_;
}
inline ::std::string* AuthMessageResponse::release_messagetext() {
  clear_has_messagetext();
  if (messagetext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagetext_;
    messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthMessageResponse::set_allocated_messagetext(::std::string* messagetext) {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (messagetext) {
    set_has_messagetext();
    messagetext_ = messagetext;
  } else {
    clear_has_messagetext();
    messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.AuthMessageResponse.messageText)
}

// -------------------------------------------------------------------

// SessionInfo

// optional int64 user_id = 1;
inline bool SessionInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 SessionInfo::user_id() const {
  // @@protoc_insertion_point(field_get:network.SessionInfo.user_id)
  return user_id_;
}
inline void SessionInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:network.SessionInfo.user_id)
}

// optional string session_id = 2;
inline bool SessionInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionInfo::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& SessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:network.SessionInfo.session_id)
  return *session_id_;
}
inline void SessionInfo::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:network.SessionInfo.session_id)
}
inline void SessionInfo::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:network.SessionInfo.session_id)
}
inline void SessionInfo::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.SessionInfo.session_id)
}
inline ::std::string* SessionInfo::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:network.SessionInfo.session_id)
  return session_id_;
}
inline ::std::string* SessionInfo::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionInfo::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:network.SessionInfo.session_id)
}

// -------------------------------------------------------------------

// ResponseContext

// optional int32 error_code = 1;
inline bool ResponseContext::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseContext::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseContext::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseContext::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ResponseContext::error_code() const {
  // @@protoc_insertion_point(field_get:network.ResponseContext.error_code)
  return error_code_;
}
inline void ResponseContext::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:network.ResponseContext.error_code)
}

// optional .network.message_type message_type_ = 2;
inline bool ResponseContext::has_message_type_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseContext::set_has_message_type_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseContext::clear_has_message_type_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseContext::clear_message_type_() {
  message_type__ = 0;
  clear_has_message_type_();
}
inline ::network::message_type ResponseContext::message_type_() const {
  // @@protoc_insertion_point(field_get:network.ResponseContext.message_type_)
  return static_cast< ::network::message_type >(message_type__);
}
inline void ResponseContext::set_message_type_(::network::message_type value) {
  assert(::network::message_type_IsValid(value));
  set_has_message_type_();
  message_type__ = value;
  // @@protoc_insertion_point(field_set:network.ResponseContext.message_type_)
}

// optional .network.RegisterMessageResponse register_response = 3;
inline bool ResponseContext::has_register_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseContext::set_has_register_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseContext::clear_has_register_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseContext::clear_register_response() {
  if (register_response_ != NULL) register_response_->::network::RegisterMessageResponse::Clear();
  clear_has_register_response();
}
inline const ::network::RegisterMessageResponse& ResponseContext::register_response() const {
  // @@protoc_insertion_point(field_get:network.ResponseContext.register_response)
  return register_response_ != NULL ? *register_response_ : *default_instance_->register_response_;
}
inline ::network::RegisterMessageResponse* ResponseContext::mutable_register_response() {
  set_has_register_response();
  if (register_response_ == NULL) register_response_ = new ::network::RegisterMessageResponse;
  // @@protoc_insertion_point(field_mutable:network.ResponseContext.register_response)
  return register_response_;
}
inline ::network::RegisterMessageResponse* ResponseContext::release_register_response() {
  clear_has_register_response();
  ::network::RegisterMessageResponse* temp = register_response_;
  register_response_ = NULL;
  return temp;
}
inline void ResponseContext::set_allocated_register_response(::network::RegisterMessageResponse* register_response) {
  delete register_response_;
  register_response_ = register_response;
  if (register_response) {
    set_has_register_response();
  } else {
    clear_has_register_response();
  }
  // @@protoc_insertion_point(field_set_allocated:network.ResponseContext.register_response)
}

// optional .network.AuthMessageResponse auth_response = 4;
inline bool ResponseContext::has_auth_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseContext::set_has_auth_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseContext::clear_has_auth_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseContext::clear_auth_response() {
  if (auth_response_ != NULL) auth_response_->::network::AuthMessageResponse::Clear();
  clear_has_auth_response();
}
inline const ::network::AuthMessageResponse& ResponseContext::auth_response() const {
  // @@protoc_insertion_point(field_get:network.ResponseContext.auth_response)
  return auth_response_ != NULL ? *auth_response_ : *default_instance_->auth_response_;
}
inline ::network::AuthMessageResponse* ResponseContext::mutable_auth_response() {
  set_has_auth_response();
  if (auth_response_ == NULL) auth_response_ = new ::network::AuthMessageResponse;
  // @@protoc_insertion_point(field_mutable:network.ResponseContext.auth_response)
  return auth_response_;
}
inline ::network::AuthMessageResponse* ResponseContext::release_auth_response() {
  clear_has_auth_response();
  ::network::AuthMessageResponse* temp = auth_response_;
  auth_response_ = NULL;
  return temp;
}
inline void ResponseContext::set_allocated_auth_response(::network::AuthMessageResponse* auth_response) {
  delete auth_response_;
  auth_response_ = auth_response;
  if (auth_response) {
    set_has_auth_response();
  } else {
    clear_has_auth_response();
  }
  // @@protoc_insertion_point(field_set_allocated:network.ResponseContext.auth_response)
}

// optional .network.SessionInfo session_info = 5;
inline bool ResponseContext::has_session_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseContext::set_has_session_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseContext::clear_has_session_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseContext::clear_session_info() {
  if (session_info_ != NULL) session_info_->::network::SessionInfo::Clear();
  clear_has_session_info();
}
inline const ::network::SessionInfo& ResponseContext::session_info() const {
  // @@protoc_insertion_point(field_get:network.ResponseContext.session_info)
  return session_info_ != NULL ? *session_info_ : *default_instance_->session_info_;
}
inline ::network::SessionInfo* ResponseContext::mutable_session_info() {
  set_has_session_info();
  if (session_info_ == NULL) session_info_ = new ::network::SessionInfo;
  // @@protoc_insertion_point(field_mutable:network.ResponseContext.session_info)
  return session_info_;
}
inline ::network::SessionInfo* ResponseContext::release_session_info() {
  clear_has_session_info();
  ::network::SessionInfo* temp = session_info_;
  session_info_ = NULL;
  return temp;
}
inline void ResponseContext::set_allocated_session_info(::network::SessionInfo* session_info) {
  delete session_info_;
  session_info_ = session_info;
  if (session_info) {
    set_has_session_info();
  } else {
    clear_has_session_info();
  }
  // @@protoc_insertion_point(field_set_allocated:network.ResponseContext.session_info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
